/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './@routes/__root'
import { Route as LocaleRouteImport } from './@routes/$locale'
import { Route as IndexRouteImport } from './@routes/index'
import { Route as LocaleIndexRouteImport } from './@routes/$locale/index'
import { Route as LocaleMovingAverageCostRouteImport } from './@routes/$locale/moving-average-cost'
import { Route as LocaleMovingAverageCostIndexRouteImport } from './@routes/$locale/moving-average-cost/index'

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexRoute = LocaleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleMovingAverageCostRoute = LocaleMovingAverageCostRouteImport.update({
  id: '/moving-average-cost',
  path: '/moving-average-cost',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleMovingAverageCostIndexRoute =
  LocaleMovingAverageCostIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => LocaleMovingAverageCostRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/moving-average-cost': typeof LocaleMovingAverageCostRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/moving-average-cost/': typeof LocaleMovingAverageCostIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleIndexRoute
  '/$locale/moving-average-cost': typeof LocaleMovingAverageCostIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/moving-average-cost': typeof LocaleMovingAverageCostRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/moving-average-cost/': typeof LocaleMovingAverageCostIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$locale'
    | '/$locale/moving-average-cost'
    | '/$locale/'
    | '/$locale/moving-average-cost/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$locale' | '/$locale/moving-average-cost'
  id:
    | '__root__'
    | '/'
    | '/$locale'
    | '/$locale/moving-average-cost'
    | '/$locale/'
    | '/$locale/moving-average-cost/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/moving-average-cost': {
      id: '/$locale/moving-average-cost'
      path: '/moving-average-cost'
      fullPath: '/$locale/moving-average-cost'
      preLoaderRoute: typeof LocaleMovingAverageCostRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/moving-average-cost/': {
      id: '/$locale/moving-average-cost/'
      path: '/'
      fullPath: '/$locale/moving-average-cost/'
      preLoaderRoute: typeof LocaleMovingAverageCostIndexRouteImport
      parentRoute: typeof LocaleMovingAverageCostRoute
    }
  }
}

interface LocaleMovingAverageCostRouteChildren {
  LocaleMovingAverageCostIndexRoute: typeof LocaleMovingAverageCostIndexRoute
}

const LocaleMovingAverageCostRouteChildren: LocaleMovingAverageCostRouteChildren =
  {
    LocaleMovingAverageCostIndexRoute: LocaleMovingAverageCostIndexRoute,
  }

const LocaleMovingAverageCostRouteWithChildren =
  LocaleMovingAverageCostRoute._addFileChildren(
    LocaleMovingAverageCostRouteChildren,
  )

interface LocaleRouteChildren {
  LocaleMovingAverageCostRoute: typeof LocaleMovingAverageCostRouteWithChildren
  LocaleIndexRoute: typeof LocaleIndexRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleMovingAverageCostRoute: LocaleMovingAverageCostRouteWithChildren,
  LocaleIndexRoute: LocaleIndexRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
