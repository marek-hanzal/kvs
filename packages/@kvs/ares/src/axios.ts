/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ARES: REST API - ve≈ôejn√©
 * REST rozhran√≠ syst√©mu ARES
 * OpenAPI spec version: 1.2.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

/**
 * Adresa - obecn√Ω p≈ôedek 
 */
export interface Adresa {
  /**
   * K√≥d st√°tu (ciselnikKod: Stat) 
   * @minLength 3
   * @maxLength 3
   */
  kodStatu?: string;
  /**
   * N√°zev st√°tu
   * @maxLength 32
   */
  nazevStatu?: string;
  /**
   * K√≥d kraje
   * @minimum 0
   * @maximum 999
   */
  kodKraje?: number;
  /**
   * N√°zev kraje
   * @maxLength 32
   */
  nazevKraje?: string;
  /**
   * K√≥d okresu
   * @minimum 0
   * @maximum 9999
   */
  kodOkresu?: number;
  /**
   * N√°zev okresu
   * @maxLength 32
   */
  nazevOkresu?: string;
  /**
   * K√≥d obce
   * @minimum 0
   * @maximum 999999
   */
  kodObce?: number;
  /**
   * N√°zev obce
   * @maxLength 48
   */
  nazevObce?: string;
  /**
   * K√≥d spr√°vn√≠ho obvodu Prahy
   * @minimum 0
   * @maximum 999
   */
  kodSpravnihoObvodu?: number;
  /**
   * N√°zev spr√°vn√≠ho obvodu Prahy 
   * @maxLength 32
   */
  nazevSpravnihoObvodu?: string;
  /**
   * K√≥d mƒõstsk√©ho obvodu Prahy
   * @minimum 0
   * @maximum 999
   */
  kodMestskehoObvodu?: number;
  /**
   * N√°zev mƒõstsk√©ho obvodu Prahy
   * @maxLength 32
   */
  nazevMestskehoObvodu?: string;
  /**
   * K√≥d mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta
   * @minimum 0
   * @maximum 999999
   */
  kodMestskeCastiObvodu?: number;
  /**
   * K√≥d ulice, ve≈ôejn√©ho prostranstv√≠ ze zdroje
   * @minimum 0
   * @maximum 9999999
   */
  kodUlice?: number;
  /**
   * N√°zev mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta 
   * @maxLength 48
   */
  nazevMestskeCastiObvodu?: string;
  /**
   * N√°zev ulice, ve≈ôejn√©ho prostranstv√≠ 
   * @maxLength 48
   */
  nazevUlice?: string;
  /**
   * ƒå√≠slo domovn√≠
   * @maximum 9999
   */
  cisloDomovni?: number;
  /**
   * Dopl≈àuj√≠c√≠ informace adresn√≠ho popisu
   * @maxLength 1500
   */
  doplnekAdresy?: string;
  /**
   * K√≥d ƒçasti obce
   * @minimum 0
   * @maximum 999999
   */
  kodCastiObce?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - ƒç√≠seln√° ƒç√°st
   * @maximum 999
   */
  cisloOrientacni?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - p√≠smenn√° ƒç√°st
   * @maxLength 1
   */
  cisloOrientacniPismeno?: string;
  /**
   * N√°zev ƒç√°sti obce
   * @maxLength 48
   */
  nazevCastiObce?: string;
  /**
   * K√≥d adresn√≠ho m√≠sta
   * @minimum 0
   * @maximum 999999999
   */
  kodAdresnihoMista?: number;
  /** Po≈°tovn√≠ smƒõrovac√≠ ƒç√≠slo adresn√≠ po≈°ty */
  psc?: number;
  /**
   * Nestrukturovan√° adresa (form√°tovan√° adresa)
   * @maxLength 1500
   */
  textovaAdresa?: string;
  /**
   * Nestrukturovan√© ƒç√≠slo/a pou≈æ√≠t√© v adrese
   * @maxLength 255
   */
  cisloDoAdresy?: string;
  /** Stav standardizace adresy dle R√öIAN */
  standardizaceAdresy?: boolean;
  /**
   * Psƒç zahraniƒçn√≠ch nebo nestandardnƒõ definovan√Ωch ƒç√≠sel
   * @maximum 255
   */
  pscTxt?: string;
  /**
   * Typ ƒç√≠sla domu - k√≥d (ciselnikKod: TypCislaDomovniho) 
   * @maximum 9999
   */
  typCisloDomovni?: number;
}

/**
 * Osoba v anga≈æm√° ekonomick√©ho subjektu
 */
export interface AngazovanaOsoba {
  /**
   * Jm√©no fyzick√© osoby
   * @maxLength 100
   */
  jmeno?: string;
  /**
   * P≈ô√≠jmen√≠ fyzick√© osoby
   * @maxLength 100
   */
  prijmeni?: string;
  /**
   * Titul p≈ôed jm√©nem fyzick√© osoby 
   * @maxLength 32
   */
  titulPredJmenem?: string;
  /**
   * Titul za jm√©nem fyzick√© osoby
   * @maxLength 32
   */
  titulZaJmenem?: string;
  /** Datum narozen√≠ fyzick√© osoby */
  datumNarozeni?: string;
}

/**
 * Z√°kladn√≠ informace o ekonomick√©m subjektu - obecn√Ω p≈ôedek
 */
export interface EkonomickySubjektZaklad {
  /**
   * Identifikaƒçn√≠ ƒç√≠slo osoby - IƒåO
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  ico?: string;
  /**
   * Obchodn√≠ jm√©no ekonomick√©ho subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /** S√≠dlo ekonomick√©ho subjektu */
  sidlo?: Adresa;
  /**
   * Pr√°vn√≠ forma - k√≥d (ciselnikKod: PravniForma, zdroj: res, com) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
  /**
   * Spr√°vnƒõ p≈ô√≠slu≈°n√Ω finanƒçn√≠ √∫≈ôad - k√≥d (ciselnikKod: FinancniUrad, zdroj:ufo) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  financniUrad?: string;
  /** Datum vzniku ekonomick√©ho subjektu  */
  datumVzniku?: string;
  /** Datum z√°niku ekonomick√©ho subjektu */
  datumZaniku?: string;
  /** Datum aktualizace z√°znamu */
  datumAktualizace?: string;
  /** Da≈àov√© identifikaƒçn√≠ ƒç√≠slo ve form√°tu CZNNNNNNNNNN */
  dic?: string;
}

/**
 * Adresa doruƒçovac√≠ dle vyhl√°≈°ky 359/2011 sb.
 */
export interface AdresaDorucovaci {
  /**
   * 1. ≈ô√°dek doruƒçovac√≠ adresy
   * @maxLength 255
   */
  radekAdresy1?: string;
  /**
   * 2. ≈ô√°dek doruƒçovac√≠ adresy
   * @maxLength 255
   */
  radekAdresy2?: string;
  /**
   * 3. ≈ô√°dek doruƒçovac√≠ adresy
   * @maxLength 255
   */
  radekAdresy3?: string;
}

/**
 * Seznam nalezen√Ωch z√°znam≈Ø - obecn√Ω p≈ôedek.
 */
export interface Seznam {
  /**
   * Poƒçet prvk≈Ø seznamu.
   * @minimum 0
   */
  pocetCelkem?: number;
}

/**
 * P≈ôedek pro v≈°echny seznamy obsahuj√≠c√≠ str√°nkov√°n√≠ a ≈ôazen√≠. Defaultn√≠ parametry pro v≈°echny aplikace s komplexn√≠m filtrem: [+/-]icoiD [+/-]obchodniJmeno [+/-]nazevObce 
 */
export interface StrankovaniARazeni {
  /**
   * Offset pro str√°nkov√°n√≠ (poloha prvn√≠ho vr√°cen√©ho prvku).
   * @minimum 0
   */
  start?: number;
  /**
   * Poƒçet prvk≈Ø k v√Ωstupu.
   * @minimum 0
   */
  pocet?: number;
  razeni?: string[];
}

export interface Chyba {
  /** ƒå√≠seln√≠kov√Ω k√≥d chyby */
  kod?: KodChybyEnum;
  /** Popis chyby */
  popis?: string;
  /** Subkod chyby */
  subKod?: string;
}

export interface Chyby {
  chyby?: Chyba[];
}

/**
 * Adresa s platnost√≠
 */
export interface AdresaAres {
  /** S√≠dlo */
  sidlo?: Adresa;
  /** Prim√°rn√≠ z√°znam */
  primarniZaznam?: boolean;
  /** Platnost √∫daje od data */
  platnostOd?: string;
  /** Platnost √∫daje od data */
  platnostDo?: string;
}

/**
 * Dal≈°√≠ √∫daje o ekonomick√©m subjektu
 */
export interface EkonomickySubjektDalsiUdaje {
  obchodniJmeno?: ObchodniJmenoAres[];
  sidlo?: AdresaAres[];
  /**
   * Pr√°vn√≠ forma - k√≥d (ciselnikKod: PravniForma, zdroj: res, com)
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
  /**
   * Aktu√°ln√≠ spisov√° znaƒçka ve tvaru ODDIL xx/SOUD (nap≈ô. B 100/MSPH) - poskytov√°no pouze pro zdroj: Ve≈ôejn√© rejst≈ô√≠ky 
   * @maxLength 32
   */
  spisovaZnacka?: string;
  /**
   * Identifikace prim√°rn√≠ho zdroje dat - k√≥d (ciselnikKod: TypZdroje, zdroj: com) 
   * @maxLength 30
   */
  datovyZdroj?: string;
}

/**
 * Obchodn√≠ jm√©no s platnost√≠
 */
export interface ObchodniJmenoAres {
  /** Platnost √∫daje od data */
  platnostOd?: string;
  /** Platnost √∫daje do data */
  platnostDo?: string;
  /**
   * Obchodn√≠ jm√©no ekonomick√©ho subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /** Prim√°rn√≠ z√°znam  */
  primarniZaznam?: boolean;
}

export type EkonomickeSubjektyKomplexFiltrAllOf = {
  czNace?: string[];
};

/**
 * Filtr pro vyhled√°n√≠ seznamu ekonomick√Ωch subjekt≈Ø
 */
export type EkonomickeSubjektyKomplexFiltr = EkonomickeSubjektyZakladFiltr & EkonomickeSubjektyKomplexFiltrAllOf;

/**
 * Seznam registrac√≠ ekonomick√©ho subjektu v jednotliv√Ωch zdroj√≠ch
 */
export interface SeznamRegistraci {
  /**
   * Stav ekonomick√©ho subjektu ve zdroji VR (Ve≈ôejn√© rejst≈ô√≠ky) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeVr?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji RES (Registr ekonomick√Ωch subjekt≈Ø) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeRes?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji R≈ΩP (Registr ≈æivnostensk√©ho podnik√°n√≠) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeRzp?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji NRPZS (N√°rodn√≠ registr poskytovatel≈Ø zdrovotnick√Ωch slu≈æeb) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeNrpzs?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji RPSH (Registr politick√Ωch stran a hnut√≠) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeRpsh?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji RCNS(Registr c√≠rkv√≠ a n√°bo≈æensk√Ωch spoleƒçenstv√≠) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeRcns?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji  SZR(Spoleƒçn√Ω zemƒõdƒõlsk√Ω registr) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeSzr?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji DPH(Registr pl√°tc≈Ø danƒõ s p≈ôidan√© hodnoty) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeDph?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji SD(Registr pl√°tc≈Ø spot≈ôebn√≠ danƒõ) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeSd?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji ISIR(Insolvenƒçn√≠ rejst≈ô√≠k) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeIr?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji CE√ö(Centr√°ln√≠ evidence √∫padc≈Ø) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeCeu?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji R≈†(Registr ≈°kol) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeRs?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji RED(Registr evidence dotac√≠) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeRed?: string;
  /**
   * Stav ekonomick√©ho subjektu ve zdroji MONITOR(Monitor √∫ƒçetn√≠ch jednotek st√°tu) - k√≥d (ciselnikKod: StavZdroje, zdroj: com) 
   * @minLength 1
   * @maxLength 64
   */
  stavZdrojeMonitor?: string;
}

export type EkonomickeSubjektySeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjekt[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ARES
 */
export type EkonomickeSubjektySeznam = Seznam & EkonomickeSubjektySeznamAllOf;

export type EkonomickySubjektAllOf = {
  /**
   * Iƒço ekonomick√©ho subjektu, pokud je iƒço p≈ôidƒõlen√©. Id ekonomick√©ho subjektu, pokud je iƒço nep≈ôidƒõlen√©.
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  /** Doruƒçovac√≠ adresa s√≠dla ekonomick√©ho subjektu */
  adresaDorucovaci?: AdresaDorucovaci;
  /** Seznam registraci ekonomick√©ho subjektu v jednotliv√Ωch datov√Ωch zdroj√≠ch */
  seznamRegistraci?: SeznamRegistraci;
  /**
   * Identifikace prim√°rn√≠ho zdroje dat.
   * @maxLength 30
   */
  primarniZdroj?: string;
  dalsiUdaje?: EkonomickySubjektDalsiUdaje[];
  czNace?: string[];
  /** Indeftifik√°tor sub-registru zdroje SZR - k√≥d (ciselnikKod: SubRegistrSzr, zdroj:com)  */
  subRegistrSzr?: string;
  /** Da≈àov√© identifikaƒçn√≠ ƒç√≠slo skupiny pl√°tce DPH ve form√°tu CZNNNNNNNNNN  */
  dicSkDph?: string;
};

/**
 * Z√°kladn√≠ informace o ekonomick√©m subjektu
 */
export type EkonomickySubjekt = EkonomickySubjektZaklad & EkonomickySubjektAllOf;

export type AngazmaFyzickaOsobaVrAllOf = {
  /** ƒålenstv√≠ */
  clenstvi?: AngazmaClenstviVr;
  /** Fyzick√° osoba */
  fyzickaOsoba?: FyzickaOsobaVr;
  /**
   * N√°zev anga≈æm√° - nestandardn√≠
   * @maxLength 255
   */
  nazevAngazma?: string;
  /**
   * Typ anga≈æm√°  - k√≥d (ciselnikKod: TypAngazma, zdroj: vr) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * Anga≈æn√° - fyzick√° osoba
 */
export type AngazmaFyzickaOsobaVr = DatumZapisuVymazuUdajeVr & AngazmaFyzickaOsobaVrAllOf;

export type AngazmaOsobaVrAllOf = {
  /** Skryt√Ω √∫daj */
  skrytyUdaj?: ObecnyTextVr;
  /**
   * Typ anga≈æm√°  - k√≥d (ciselnikKod: TypAngazma, zdroj: vr) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
  /** ƒålenstv√≠ */
  clenstvi?: AngazmaClenstviVr;
  /**
   * N√°zev anga≈æm√° - nestandardn√≠
   * @maxLength 255
   */
  nazevAngazma?: string;
  /** Pr√°vnick√° osoba */
  pravnickaOsoba?: PravnickaOsobaVr;
  /** Fyzick√° osoba */
  fyzickaOsoba?: FyzickaOsobaVr;
};

/**
 * Anga≈æovan√° osoba
 */
export type AngazmaOsobaVr = DatumZapisuVymazuUdajeVr & AngazmaOsobaVrAllOf;

export type EkonomickeSubjektyVrSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektVr[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje VR
 */
export type EkonomickeSubjektyVrSeznam = Seznam & EkonomickeSubjektyVrSeznamAllOf;

/**
 * Ekonomick√Ω subjekt
 */
export interface EkonomickySubjektVr {
  /**
   * iƒço/id ekonomick√©ho subjektu
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamVr[];
}

export type InsolvencniRizeniVrAllOf = {
  spravce?: AngazmaOsobaVr[];
  insolvencniZapis?: InsolvencniZapisVr[];
};

/**
 * Insolvence
 */
export type InsolvencniRizeniVr = DatumZapisuVymazuUdajeVr & InsolvencniRizeniVrAllOf;

export type KonkursVrAllOf = {
  spravce?: AngazmaOsobaVr[];
  /**
   * Typ konkursu - k√≥d (ciselnikKod: TypKonkursu) 
   * @maxLength 50
   */
  typKonkursu?: string;
  /** Datum rozhodnut√≠ okresn√≠ho soudu */
  datumRozhodnutiOs?: string;
  /** Datum vyvƒõ≈°en√≠ rozhodnut√≠ */
  datumVyveseni?: string;
  /**
   * Spisov√° znaƒçka konkurzn√≠ho ≈ô√≠zen√≠
   * @maxLength 255
   */
  spisZnOs?: string;
  /** Vlastn√≠ informace o konkurzn√≠m ≈ô√≠zen√≠ */
  text?: string;
  zruseniKonkursu?: ObecnyTextVr[];
};

/**
 * Konkurzn√≠ ≈ô√≠zen√≠
 */
export type KonkursVr = DatumZapisuVymazuUdajeVr & KonkursVrAllOf;

export type OdstepnyZavodVrAllOf = {
  vedouci?: AngazmaOsobaVr[];
  ostatniSkutecnosti?: ObecnyTextVr[];
  /** P≈ôedmƒõt podnik√°n√≠, p≈ôedmƒõt ƒçinnosti, √∫ƒçel */
  cinnosti?: CinnostiVr;
  ico?: IcoVr[];
  sidlo?: AdresaVr[];
  pravniForma?: PravniFormaVr[];
  obchodniJmeno?: ObchodniJmenoVr[];
};

/**
 * Od≈°tƒõpn√Ω z√°vod
 */
export type OdstepnyZavodVr = DatumZapisuVymazuUdajeVr & OdstepnyZavodVrAllOf;

export type OrganVrAllOf = {
  /**
   * N√°zev org√°nu - nestandardn√≠
   * @maxLength 255
   */
  nazevOrganu?: string;
  pocetClenu?: PocetClenuVr[];
  clenoveOrganu?: AngazmaOsobaVr[];
  /**
   * Typ org√°nu - k√≥d (ciselnikKod: TypOrganu, zdroj: vr) 
   * @minLength 1
   * @maxLength 64
   */
  typOrganu?: string;
  /**
   * N√°zev anga≈æm√° - nestandardn√≠
   * @maxLength 255
   */
  nazevAngazma?: string;
  /**
   * Typ org√°nu - k√≥d (ciselnikKod: TypOrganu, zdroj: vr) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * ≈ò√≠d√≠c√≠ org√°n - obecn√Ω p≈ôedek
 */
export type OrganVr = DatumZapisuVymazuUdajeVr & OrganVrAllOf;

export type PodnikatelVrAllOf = {
  bydliste?: AdresaVr[];
  /** Informace o osobƒõ podnikatele */
  osobaPodnikatel?: AngazmaFyzickaOsobaVr;
  pobyt?: AdresaVr[];
  /**
   * Typ anga≈æm√°  - k√≥d (ciselnikKod: TypAngazma, zdroj: vr) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
  /**
   * N√°zev anga≈æm√° - nestandardn√≠
   * @maxLength 255
   */
  nazevAngazma?: string;
};

/**
 * Podnikatel
 */
export type PodnikatelVr = DatumZapisuVymazuUdajeVr & PodnikatelVrAllOf;

export type PravnickaOsobaVrAllOf = {
  /**
   * Idenitifikaƒçn√≠ ƒç√≠slo pr√°vnick√© osoby
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  ico?: string;
  /**
   * N√°zev pr√°vnick√© osoby
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  zastoupeni?: AngazmaFyzickaOsobaVr[];
  /**
   * Pr√°vn√≠ forma - k√≥d (ciselnikKod: PravniForma, zdroj: res, com)
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
};

/**
 * Pr√°vnick√° osoba
 */
export type PravnickaOsobaVr = OsobaVr & PravnickaOsobaVrAllOf;

export type SpolecniciVrAllOf = {
  /**
   * N√°zev org√°nu - nestandardn√≠
   * @maxLength 255
   */
  nazevOrganu?: string;
  spolecnik?: SpolecnikVr[];
  spolecnyPodil?: SpolecnyPodilVr[];
  /**
   * Typ org√°nu - k√≥d (ciselnikKod: TypOrganu, zdroj: vr) 
   * @minLength 1
   * @maxLength 64
   */
  typOrganu?: string;
  uvolnenyPodil?: UvolnenyPodilVr[];
  /**
   * N√°zev org√°nu - nestandardn√≠
   * @maxLength 255
   */
  nazev?: string;
};

/**
 * Spoleƒçn√≠ci
 */
export type SpolecniciVr = DatumZapisuVymazuUdajeVr & SpolecniciVrAllOf;

export type SpolecnikVrAllOf = {
  podil?: PodilVr[];
  /** Pr√°vnick√° nebo fyzick√° osoba v anga≈æm√° spoleƒçn√≠k */
  osoba?: AngazmaOsobaVr;
};

/**
 * Spoleƒçn√≠k
 */
export type SpolecnikVr = DatumZapisuVymazuUdajeVr & SpolecnikVrAllOf;

export type SpolecnyPodilVrAllOf = {
  podilnik?: AngazmaOsobaVr[];
  podil?: PodilVr[];
};

/**
 * Spoleƒçn√Ω pod√≠l
 */
export type SpolecnyPodilVr = DatumZapisuVymazuUdajeVr & SpolecnyPodilVrAllOf;

export type StatutarniOrganVrAllOf = {
  zpusobJednani?: ObecnyTextVr[];
};

/**
 * Statut√°rn√≠ org√°n
 */
export type StatutarniOrganVr = OrganVr & StatutarniOrganVrAllOf;

export type ZaznamVrAllOf = {
  ostatniOrgany?: OrganVr[];
  statutarniOrgany?: StatutarniOrganVr[];
  podnikatel?: PodnikatelVr[];
  spolecnici?: SpolecniciVr[];
  odstepneZavody?: OdstepnyZavodVr[];
  insolvence?: InsolvencniRizeniVr[];
  konkursy?: KonkursVr[];
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje VR
 */
export type ZaznamVr = ZaznamVrZaklad & ZaznamVrAllOf;

export type AdresaVrAllOf = {
  /** Adresa */
  adresa?: Adresa;
  /**
   * Typ typu adresy - k√≥d (ciselnikKod: TypAdresy, zdroj:vr) 
   * @minLength 1
   * @maxLength 64
   */
  typAdresy?: string;
};

/**
 * Adresa
 */
export type AdresaVr = DatumZapisuVymazuUdajeVr & AdresaVrAllOf;

/**
 * ƒålenstv√≠ v anga≈æm√° 
 */
export interface AngazmaClenstviVr {
  /** Dopl≈àuj√≠c√≠ text k osobƒõ */
  textZaOsobu?: string;
  /** ƒålenstv√≠ osoby v anga≈æm√° */
  clenstvi?: ClenstviVr;
  /** Funkce osoby v anga≈æm√° */
  funkce?: FunkceVr;
  /** Dopl≈àuj√≠c√≠ text k zru≈°en√≠  osoby */
  textZruseni?: string;
}

/**
 * ƒåinnosti
 */
export interface CinnostiVr {
  predmetPodnikani?: ObecnyTextVr[];
  doplnkovaCinnost?: ObecnyTextVr[];
  predmetCinnosti?: ObecnyTextVr[];
  ucel?: ObecnyTextVr[];
}

/**
 * ƒålenstv√≠
 */
export interface ClenstviVr {
  /** Datum vzniku ƒçlenstv√≠ */
  vznikClenstvi?: string;
  /** Datum z√°niku ƒçlenstv√≠ */
  zanikClenstvi?: string;
}

export type DatumVrAllOf = {
  /** Datum */
  hodnota?: string;
};

/**
 * Datum
 */
export type DatumVr = DatumZapisuVymazuUdajeVr & DatumVrAllOf;

/**
 * Datum z√°pisu, v√Ωmazu √∫daje - obecn√Ω p≈ôedek
 */
export interface DatumZapisuVymazuUdajeVr {
  /** Datum z√°pisu √∫daje */
  datumZapisu?: string;
  /** Datum v√Ωmazu √∫daje */
  datumVymazu?: string;
}

export type EmiseAkcieVrAllOf = {
  /**
   * Typ akcie - k√≥d (ciselnikKod: TypAkcie) 
   * @maxLength 50
   */
  typAkcie?: string;
  /**
   * Podoby akci√≠ (listinn√°, zaknihovan√°, imobilizovan√°)  - k√≥d (ciselnikKod: PodobaAkcie) 
   * @maxLength 50
   */
  podobaAkcie?: string;
  /**
   * Poƒçet akci√≠ v emisi
   * @minimum 0
   */
  pocet?: number;
  /** Dopl≈àkov√Ω text za akci√≠ */
  text?: string;
  /** Hodnota akcie */
  hodnota?: ObnosVr;
};

/**
 * Emise akcie
 */
export type EmiseAkcieVr = DatumZapisuVymazuUdajeVr & EmiseAkcieVrAllOf;

/**
 * Funkce
 */
export interface FunkceVr {
  /** Datum vzniku funkce */
  vznikFunkce?: string;
  /** Datum z√°niku funkce */
  zanikFunkce?: string;
  /**
   * N√°zev funkce
   * @maxLength 255
   */
  nazev?: string;
}

export type FyzickaOsobaVrAllOf = {
  /** Adresa bydli≈°tƒõ fyzick√© osoby */
  bydliste?: Adresa;
  /** Datum narozen√≠ */
  datumNarozeni?: string;
  /**
   * Jm√©no
   * @maxLength 100
   */
  jmeno?: string;
  /**
   * P≈ô√≠jmen√≠
   * @maxLength 100
   */
  prijmeni?: string;
  /**
   * St√°tn√≠ obƒçanstv√≠ osoby - kod (ciselnikKod: Stat)
   * @minLength 3
   * @maxLength 3
   */
  statniObcanstvi?: string;
  /**
   * Titul p≈ôed jm√©nem
   * @maxLength 32
   */
  titulPredJmenem?: string;
  /**
   * Titul za jm√©nem
   * @maxLength 32
   */
  titulZaJmenem?: string;
};

/**
 * Fyzick√° osoba - obecn√Ω p≈ôedek
 */
export type FyzickaOsobaVr = OsobaVr & FyzickaOsobaVrAllOf;

export type IcoVrAllOf = {
  /**
   * Hodnota IƒåO
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  hodnota?: string;
};

/**
 * Iƒáo
 */
export type IcoVr = DatumZapisuVymazuUdajeVr & IcoVrAllOf;

export type InsolvencniZapisVrAllOf = {
  /** Text insolvenƒçn√≠ho z√°pisu */
  text?: string;
  /**
   * Typ insolvenƒçn√≠ho z√°pisu- k√≥d (ciselnikKod: TypInsolvencnihoZapisu) 
   * @maxLength 50
   */
  typZapisu?: string;
};

/**
 * Insolvenƒçn√≠ z√°pis
 */
export type InsolvencniZapisVr = DatumZapisuVymazuUdajeVr & InsolvencniZapisVrAllOf;

export type KategorieZoVrAllOf = {
  /**
   * Typ kategorie zahraniƒçn√≠ osoby - k√≥d (ciselnikKod: KategorieZo) 
   * @maxLength 50
   */
  typKategorieZo?: string;
};

/**
 * Kategorie zahraniƒçn√≠ organizace
 */
export type KategorieZoVr = DatumZapisuVymazuUdajeVr & KategorieZoVrAllOf;

export type ObecnyTextVrAllOf = {
  /** Obecn√Ω text */
  hodnota?: string;
};

/**
 * Obecn√Ω text
 */
export type ObecnyTextVr = DatumZapisuVymazuUdajeVr & ObecnyTextVrAllOf;

export type ObchodniJmenoCiziVrAllOf = {
  /**
   * jazyk
   * @maxLength 255
   */
  jazyk?: string;
};

/**
 * Obchodn√≠ jm√©no - ciz√≠
 */
export type ObchodniJmenoCiziVr = ObchodniJmenoVr & ObchodniJmenoCiziVrAllOf;

export type ObchodniJmenoVrAllOf = {
  /**
   * Hodnota obchodn√≠ho jm√©na
   * @minLength 1
   * @maxLength 2000
   */
  hodnota?: string;
};

/**
 * Obchodn√≠ jm√©no - obecn√Ω p≈ôedek
 */
export type ObchodniJmenoVr = DatumZapisuVymazuUdajeVr & ObchodniJmenoVrAllOf;

/**
 * Obnos
 */
export interface ObnosVr {
  /**
   * Typ obnosu - k√≥d (ciselnikKod: TypObnosu)
   * @maxLength 50
   */
  typObnos?: string;
  /** Hodnota */
  hodnota?: string;
}

/**
 * Osoba - obecn√Ω p≈ôedek
 */
export interface OsobaVr {
  /** Dopl≈àkov√° informace k osobƒõ */
  textOsoba?: string;
  /** Platnost dopl≈àkov√© informace o osobƒõ od data */
  textOsobaOd?: string;
  /** Prim√°rn√≠ adresa dan√© osoby (u fyzick√© pobyt, u pr√°vnick√© s√≠dlo) */
  adresa?: Adresa;
  /** Platnost dopl≈àkov√© informace o osobƒõ od data */
  textOsobaDo?: string;
}

export type PocetClenuVrAllOf = {
  /**
   * Poƒçet ƒçlen≈Ø org√°nu
   * @minimum 0
   */
  pocetClenu?: number;
  /**
   * Maxim√°ln√≠ poƒçet ƒçlen≈Ø org√°nu 
   * @minimum 0
   */
  maxPocetClenu?: number;
  /**
   * Typ poƒçet ƒçlen≈Ø - k√≥d (ciselnikKod: TypPocetClenu) 
   * @maxLength 15
   */
  typ?: string;
};

/**
 * Poƒçet ƒçlen≈Ø org√°nu
 */
export type PocetClenuVr = DatumZapisuVymazuUdajeVr & PocetClenuVrAllOf;

export type PodilVrAllOf = {
  /** Text k pod√≠lu */
  text?: string;
  /** Vklad */
  vklad?: ObnosVr;
  /** Velikost pod√≠lu */
  velikostPodilu?: ObnosVr;
  /** Splacenost pod√≠lu */
  splaceni?: ObnosVr;
  zastavniPravo?: ZastavniPravoVr[];
};

/**
 * Pod√≠l
 */
export type PodilVr = DatumZapisuVymazuUdajeVr & PodilVrAllOf;

export type PravniFormaVrAllOf = {
  /**
   * Hodnota pravn√≠ formy - k√≥d (ciselnikKod: PravniForma, zdroj:res, com) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  hodnota?: string;
};

/**
 * Pr√°vn√≠ forma
 */
export type PravniFormaVr = DatumZapisuVymazuUdajeVr & PravniFormaVrAllOf;

export type SpisovaZnackaVrAllOf = {
  /**
   * Obchodn√≠ soud - k√≥d (ciselnikKod: SoudVr, zdroj: vr) 
   * @maxLength 15
   */
  soud?: string;
  /**
   * Odd√≠l spisov√© znaƒçky
   * @maxLength 20
   */
  oddil?: string;
  /** Vlozka spisov√© znaƒçky */
  vlozka?: number;
};

/**
 * Spisov√° znaƒçka
 */
export type SpisovaZnackaVr = DatumZapisuVymazuUdajeVr & SpisovaZnackaVrAllOf;

export type UvolnenyPodilVrAllOf = {
  /** Text k uvolnƒõn√©mu pod√≠lu */
  clenstvi?: AngazmaClenstviVr;
  podil?: PodilVr[];
};

/**
 * Uvolnƒõn√Ω pod√≠l
 */
export type UvolnenyPodilVr = DatumZapisuVymazuUdajeVr & UvolnenyPodilVrAllOf;

export type VkladVrAllOf = {
  /** Vklad */
  vklad?: ObnosVr;
  /** Text k vkladu */
  text?: string;
  /**
   * Typ vkladu - k√≥d (ciselnikKod: TypObnosu)
   * @maxLength 50
   */
  typVkladu?: string;
};

/**
 * Vklady
 */
export type VkladVr = DatumZapisuVymazuUdajeVr & VkladVrAllOf;

export type ZakladniKapitalVrAllOf = {
  /**
   * Typ jmƒõn√≠ - k√≥d (ciselnikKod: TypJmeni)
   * @maxLength 50
   */
  typJmeni?: string;
  /** Dopl≈àuj√≠c√≠ text */
  text?: string;
  /** Celkov√Ω vklad */
  vklad?: ObnosVr;
  /** Informace o splacen√≠ */
  splaceni?: ObnosVr;
};

/**
 *  Z√°kladn√≠ kapit√°l
 */
export type ZakladniKapitalVr = DatumZapisuVymazuUdajeVr & ZakladniKapitalVrAllOf;

export type ZastavniPravoVrAllOf = {
  /** Text z√°stavn√≠ho pr√°va */
  text?: string;
  /** Vznik z√°stavn√≠ho pr√°va */
  vznikZastavnihoPrava?: string;
  /** Z√°nik z√°stavn√≠ho pr√°va */
  zanikZastavnihoPrava?: string;
};

/**
 * Z√°stavn√≠ pr√°vo
 */
export type ZastavniPravoVr = DatumZapisuVymazuUdajeVr & ZastavniPravoVrAllOf;

/**
 * Detailn√≠ informace o ekonomick√©m subjektu - obecn√Ω p≈ôedek
 */
export interface ZaznamVrZaklad {
  akcie?: EmiseAkcieVr[];
  /**
   * Typ ve≈ôejn√©ho rejst≈ô√≠ku (VR) - k√≥d (ciselnikKod: TypRejstriku ) 
   * @maxLength 15
   */
  rejstrik?: string;
  /** Prim√°rn√≠ z√°znam */
  primarniZaznam?: boolean;
  spisovaZnacka?: SpisovaZnackaVr[];
  ico?: IcoVr[];
  obchodniJmeno?: ObchodniJmenoVr[];
  vklady?: VkladVr[];
  obchodniJmenoCizi?: ObchodniJmenoCiziVr[];
  zakladniKapital?: ZakladniKapitalVr[];
  pravniForma?: PravniFormaVr[];
  /**
   * Finanƒçn√≠ √∫≈ôad - k√≥d (ciselnikKod: FinancniUrad, zdroj: ufo) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  financniUrad?: string;
  adresy?: AdresaVr[];
  ostatniSkutecnosti?: ObecnyTextVr[];
  /** Datum aktualizace */
  datumAktualizace?: string;
  /**
   * Stav ekonomick√©ho subjektu v ARES - k√≥d (ciselnikKod: StavZdroje, zdroj:com) 
   * @minLength 1
   * @maxLength 64
   */
  stavSubjektu?: string;
  datumVzniku?: DatumVr[];
  /** Datum z√°pisu subjektu do VR */
  datumZapisu?: string;
  /** Datum v√Ωmazu subjektu z VR */
  datumVymazu?: string;
  zpusobRizeni?: ZpusobRizeniVr[];
  kategorieZO?: KategorieZoVr[];
  pravniDuvodVymazu?: ObecnyTextVr[];
  /** P≈ôedmƒõt podnik√°n√≠, p≈ôedmƒõt ƒçinnosti, √∫ƒçel */
  cinnosti?: CinnostiVr;
  nazevNejvyssihoOrganu?: ObecnyTextVr[];
  exekuce?: ObecnyTextVr[];
}

export type ZpusobRizeniVrAllOf = {
  /**
   * Zp≈Øsob ≈ô√≠zen√≠ - k√≥d (ciselnikKod: TypZpusobuRizeni) 
   * @maxLength 50
   */
  typ?: string;
};

/**
 * Zp≈Øsob ≈ô√≠zen√≠
 */
export type ZpusobRizeniVr = DatumZapisuVymazuUdajeVr & ZpusobRizeniVrAllOf;

/**
 * Statistick√© informace o subjektu
 */
export interface StatistickeUdaje {
  /**
   * Institucin√°ln√≠ sektor dle ESA2010 - k√≥d (ciselnikKod: FceVladnichInstituci) 
   * @minLength 5
   * @maxLength 5
   * @pattern ^\d{5}$
   */
  institucionalniSektor2010?: string;
  /**
   * Kategorie dle poƒçtu pracovn√≠k≈Ø - k√≥d (ciselnikKod: KategoriePoctuPracovniku, zdroj: res) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  kategoriePoctuPracovniku?: string;
}

export type ZaznamResAllOf = {
  /**
   * Pr√°vn√≠ forma ROS - k√≥d (ciselnikKod: PravniFormaRos, zdroj:res) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniFormaRos?: string;
  czNace?: string[];
  doplnkovePravniFormy?: string[];
  /** Statistick√© √∫daje ekonomick√©ho subjektu */
  statistickeUdaje?: StatistickeUdaje;
  /**
   * Z√°kladn√≠ √∫zemn√≠ jednotka s√≠dla organizace - k√≥d (ciselnikKod: ZakladniUzemniJednotka) 
   * @minLength 6
   * @maxLength 6
   * @pattern ^\d{6}$
   */
  zakladniUzemniJednotka?: string;
  /** Logick√° informace o prim√°rn√≠m(hlavn√≠m) z√°znamu ekonomick√©ho subjektu.  */
  primarniZaznam?: boolean;
  /**
   * P≈ôeva≈æuj√≠c√≠ CZ-NACE ekonomick√©ho subjektu - k√≥d (ciselnikKod: CzNace, zdroj:res) 
   * @minLength 1
   * @maxLength 5
   */
  czNacePrevazujici?: string;
  /**
   * Okres s√≠dla - k√≥d NUTS/LAU (ciselnikKod: okresLau, zdroj:res) 
   * @maxLength 6
   */
  okresNutsLau?: string;
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje RES
 */
export type ZaznamRes = EkonomickySubjektZaklad & ZaznamResAllOf;

export type EkonomickeSubjektyResSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektRes[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje RES
 */
export type EkonomickeSubjektyResSeznam = Seznam & EkonomickeSubjektyResSeznamAllOf;

/**
 * Ekonomick√Ω subjekt 
 */
export interface EkonomickySubjektRes {
  /**
   * iƒço/id ekonomick√©ho subjektu 
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamRes[];
}

export type AngazovanySubjektAdresaAllOf = {
  /** Platnost adresy od data */
  platnostOd?: string;
  /** Platnost adresy do data */
  platnostDo?: string;
};

/**
 * Adresa 
 */
export type AngazovanySubjektAdresa = Adresa & AngazovanySubjektAdresaAllOf;

/**
 * Pr√°vnick√© osoby v anga≈æm√° ekonomick√©ho subjektu. 
 */
export interface AngazovanySubjektRzpZaklad {
  /**
   * Typ anga≈æm√° osoby u subjektu ve zdroji R≈ΩP (Registr ≈æivnostensk√©ho podnik√°n√≠) - k√≥d (ciselnikKod: TypAngazma, zdroj: rzp) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
  /** Platnost anga≈æm√° subjektu od data */
  platnostOd?: string;
  /** Platnost anga≈æm√° subjektu do data */
  platnostDo?: string;
  /**
   * Iƒço anga≈æovan√©ho subjektu
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  ico?: string;
  /**
   * obchodn√≠ jm√©no anga≈æovan√©ho subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /** Adresa s√≠dla anga≈æovan√©ho subjektu */
  sidlo?: AngazovanySubjektAdresa;
  /**
   * Typ subjektu - k√≥d (ciselnikKod: TypSubjektu, zdroj: rzp) 
   * @minLength 1
   * @maxLength 64
   */
  typSubjektu?: string;
  /**
   * Pr√°vn√≠ forma - k√≥d (ciselnikKod: PravniForma, zdroj:com, res) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
  /**
   * K√≥d st√°tu (ciselnikKod: Stat, zdroj:com) 
   * @minLength 3
   * @maxLength 3
   */
  kodStatu?: string;
}

export type EkonomickySubjektRzpAdresaAllOf = {
  /** Platnost adresy od data */
  platnostOd?: string;
  /** Platnost adresy do data  */
  platnostDo?: string;
  /**
   * Typ adresy  - k√≥d (ciselnikKod: TypAdresy, zdroj: rzp) 
   * @minLength 1
   * @maxLength 64
   */
  typAdresy?: string;
};

/**
 * Vazebn√≠ tabulka adres
 */
export type EkonomickySubjektRzpAdresa = Adresa & EkonomickySubjektRzpAdresaAllOf;

/**
 * Ud√°losti v r√°mci insolvenƒçn√≠ho ≈ô√≠zen√≠
 */
export interface InsolvencniRizeni {
  /** Datum z√°pisu ud√°losti  */
  datumZapisu?: string;
  /** Datum zplatnƒõn√≠ ud√°losti  */
  platnostOd?: string;
}

/**
 * Provozovna - obecn√Ω p≈ôedek
 */
export interface ProvozovnaZaklad {
  /**
   * identifikaƒçn√≠ ƒç√≠slo provozovny
   * @minLength 10
   * @maxLength 10
   */
  icp?: number;
  /** Adresa s√≠dla provozovny */
  sidloProvozovny?: Adresa;
  /**
   * Um√≠stƒõn√≠ provozovny
   * @maxLength 254
   */
  umisteniProvozovny?: string;
  /** Platnost provozovny od data */
  platnostOd?: string;
  /** Platnost provozovny do data  */
  platnostDo?: string;
  pozastaveniProvozovny?: ZivnostProvozovnaPozastaveni[];
  /**
   * Typ provozovny - k√≥d (ciselnikKod: TypProvozovny) 
   * @minLength 1
   * @maxLength 1
   * @pattern ^\d{1}$
   */
  typProvozovny?: string;
  /**
   * N√°zev provozovny
   * @maxLength 254
   */
  nazev?: string;
}

/**
 * Stav provozovny
 */
export interface ProvozovnyRzpStav {
  /**
   * Celkov√Ω poƒçet provozoven
   * @minimum 0
   */
  pocetCelkem?: number;
  /**
   * Celkov√Ω poƒçet zanikl√Ωch provozoven
   * @minimum 0
   */
  pocetZaniklych?: number;
  /**
   * Celkov√Ω poƒçet aktivnich provozoven
   * @minimum 0
   */
  pocetAktivnich?: number;
  /**
   * Celkov√Ω poƒçet zanikl√Ωch provozoven
   * @minimum 0
   */
  pocetPozastavenych?: number;
}

export type ZaznamRzpZakladAllOf = {
  /** Ud√°losti v r√°mci insolvenƒçn√≠ho ≈ô√≠zen√≠ */
  insolvencniRizeni?: InsolvencniRizeni;
  /** Datum doruƒçen√≠ prvn√≠ho v√Ωpisu slou≈æ√≠c√≠ho jako pr≈Økaz ≈æivnostensk√©ho podnik√°n√≠,  */
  datumDoruceniVypisu?: string;
  adresySubjektu?: EkonomickySubjektRzpAdresa[];
  /**
   * Typ subjektu - k√≥d (ciselnikKod: TypSubjektu, zdroj: rzp) 
   * @minLength 1
   * @maxLength 64
   */
  typSubjektu?: string;
  /**
   * ≈Ωivnostensk√Ω √∫≈ôad ‚Äì k√≥d (ciselnikKod: ZivnostenskyUrad, zdroj: rzp)
   * @pattern ^\d{6}$
   */
  zivnostenskyUrad?: string;
  /**
   * N√°zev organizaƒçn√≠ slo≈æky
   * @minLength 1
   * @maxLength 2000
   */
  organizacniSlozka?: string;
  /** Stav ≈æivnosti - k√≥d (ciselnikKod: StavZivnosti)  */
  zivnostiStav?: ZivnostiRzpStav;
  /** Datum z√°pisu do Obchodn√≠ho nebo podobn√©ho rejst≈ô√≠ku  */
  datumZapisuVr?: string;
  /** Stav provozovny - k√≥d (ciselnikKod: StavProvozovny)  */
  provozovnyStav?: ProvozovnyRzpStav;
  /** Identifikace prim√°rn√≠ho z√°znamu  pozn.: U multiplicitn√≠ch registrac√≠ je pouze jedna registrace prim√°rn√≠ */
  primarniZaznam?: boolean;
  /**
   * K√≥d st√°tu  (ciselnikKod: Stat, zdroj:com) 
   * @minLength 3
   * @maxLength 3
   */
  kodStatu?: string;
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje R≈ΩP
 */
export type ZaznamRzpZaklad = EkonomickySubjektZaklad & ZaznamRzpZakladAllOf;

/**
 * ≈Ωivnost bez odpovƒõdn√©ho z√°stupce
 */
export interface ZivnostBezOZ {
  /** Zah√°jen√≠ vykon√°v√°n√≠ ≈æivnosti bez odpovƒõdn√©ho z√°stupce od data  */
  platnostOd?: string;
  /** Ukonƒçen√≠ vykon√°v√°n√≠ ≈æivnosti bez odpovƒõdn√©ho z√°stupce od data  */
  platnostDo?: string;
}

/**
 * Stav ≈æivnosti
 */
export interface ZivnostiRzpStav {
  /**
   * Celkov√Ω poƒçet aktivn√≠ch ≈æivnost√≠
   * @minimum 0
   */
  pocetAktivnich?: number;
  /**
   * Celkov√Ω poƒçet zanikl√Ωch ≈æivnost√≠
   * @minimum 0
   */
  pocetZaniklych?: number;
  /**
   * Celkov√Ω poƒçet pozastaven√Ωch ≈æivnost√≠
   * @minimum 0
   */
  pocetPozastavenych?: number;
  /**
   * Celkov√Ω poƒçet p≈ôeru≈°en√Ωch ≈æivnost√≠
   * @minimum 0
   */
  pocetPrerusenych?: number;
  /**
   * Celkov√Ω poƒçet ≈æivnost√≠
   * @minimum 0
   */
  pocetCelkem?: number;
}

/**
 * ≈Ωivnost - obor ƒçinnosti
 */
export interface ZivnostOborCinnosti {
  /** Platnost z√°znamu od data */
  platnostOd?: string;
  /** Platnost z√°znamu do data */
  platnostDo?: string;
  /**
   * N√°zev oboru
   * @minLength 5
   * @maxLength 750
   */
  oborNazev?: string;
}

/**
 * Podm√≠nky pro vykon√°v√°n√≠ ≈æivnosti
 */
export interface ZivnostPodminky {
  /** Platnost podm√≠nky od data */
  platnostOd?: string;
  /** Platnost podm√≠nky do data */
  platnostDo?: string;
  /** Text podm√≠nky provozov√°n√≠ ≈æivnosti */
  podminka?: string;
}

/**
 * P≈ôeru≈°en√≠ ≈æivnosti
 */
export interface ZivnostPreruseni {
  /** Platnost p≈ôeru≈°en√≠ ≈æivnosti od data */
  platnostOd?: string;
  /** Platnost p≈ôeru≈°en√≠ ≈æivnosti do data */
  platnostDo?: string;
}

/**
 * Pozastaven√≠ provozovny nebo ≈æivnosti
 */
export interface ZivnostProvozovnaPozastaveni {
  /** Platnost pozastaven√≠ ≈æivnosti od data */
  platnostOd?: string;
  /** Platnost pozastaven√≠ ≈æivnosti do data */
  platnostDo?: string;
  /**
   * Popis rozsahu pozastaven√≠ ≈æivnosti
   * @maxLength 1024
   */
  rozsahPozastaveni?: string;
}

/**
 * ≈Ωivnosti, kter√© ekonomick√Ω subjekt provozuje nebo provozoval - obecn√Ω p≈ôedek
 */
export interface ZivnostZaklad {
  /** Datum vzniku ≈æivnosti  */
  datumVzniku?: string;
  /** Datum z√°niku ≈æivnosti  */
  datumZaniku?: string;
  /** Platnost ≈æivnosti do data */
  platnostDo?: string;
  /**
   * P≈ôedmƒõt podnik√°ni ≈æivnosti
   * @minLength 5
   * @maxLength 750
   */
  predmetPodnikani?: string;
  pozastaveniZivnosti?: ZivnostProvozovnaPozastaveni[];
  podminkyProvozovaniZivnosti?: ZivnostPodminky[];
  preruseniZivnosti?: ZivnostPreruseni[];
  zivnostBezOz?: ZivnostBezOZ[];
  /** Datum aktualizace z√°znamu */
  datumAktualizace?: string;
  /**
   * Druh ≈æivnosti - k√≥d (ciselnikKod: DruhZivnosti) 
   * @minLength 1
   * @maxLength 1
   */
  druhZivnosti?: string;
}

export type AngazovanaOsobaRzpAllOf = {
  /** Platnost anga≈æm√° osoby od data */
  platnostOd?: string;
  /** Platnost anga≈æm√° osoby do data  */
  platnostDo?: string;
  /**
   * St√°tn√≠ obƒçanstv√≠ osoby - k√≥d (ciselnikKod: Stat, zdroj:com) 
   * @minLength 3
   * @maxLength 3
   */
  statniObcanstvi?: string;
  /**
   * Typ anga≈æm√° osoby  - k√≥d (ciselnikKod: TypAngazma, zdroj: rzp) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * Anga≈æovan√° osoba zdroje R≈ΩP
 */
export type AngazovanaOsobaRzp = AngazovanaOsoba & AngazovanaOsobaRzpAllOf;

export type AngazovanySubjektRzpAllOf = {
  osobyZastupce?: AngazovanaOsobaRzp[];
};

/**
 * Pr√°vnick√© osoby v anga≈æm√° ekonomick√©ho subjektu. 
 */
export type AngazovanySubjektRzp = AngazovanySubjektRzpZaklad & AngazovanySubjektRzpAllOf;

export type EkonomickeSubjektyRzpSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektRzp[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje R≈ΩP
 */
export type EkonomickeSubjektyRzpSeznam = Seznam & EkonomickeSubjektyRzpSeznamAllOf;

/**
 * Ekonomick√Ω subjekt 
 */
export interface EkonomickySubjektRzp {
  /**
   * iƒço/id ekonomick√©ho subjektu
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamRzp[];
}

export type ProvozovnaAllOf = {
  oboryCinnosti?: ZivnostOborCinnosti[];
};

/**
 * Provozovna
 */
export type Provozovna = ProvozovnaZaklad & ProvozovnaAllOf;

export type ZaznamRzpAllOf = {
  souvisejiciSubjekty?: AngazovanySubjektRzp[];
  /** Informace o podnikateli */
  osobaPodnikatel?: AngazovanaOsobaRzp;
  angazovaneOsoby?: AngazovanaOsobaRzp[];
  zivnosti?: Zivnost[];
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje R≈ΩP
 */
export type ZaznamRzp = ZaznamRzpZaklad & ZaznamRzpAllOf;

export type ZivnostAllOf = {
  oboryCinnosti?: ZivnostOborCinnosti[];
  odpovedniZastupci?: AngazovanaOsobaRzp[];
  provozovny?: Provozovna[];
};

/**
 * ≈Ωivnosti, kter√© ekonomick√Ω subjekt provozuje nebo provozoval ve zdroji R≈ΩP
 */
export type Zivnost = ZivnostZaklad & ZivnostAllOf;

export type AngazovanaOsobaNrpzsAllOf = {
  /**
   * Typ anga≈æm√° osoby  - k√≥d (ciselnikKod: TypAngazma, zdroj: nrpzs) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * Anga≈æovan√° osoba
 */
export type AngazovanaOsobaNrpzs = AngazovanaOsoba & AngazovanaOsobaNrpzsAllOf;

/**
 * Kontaktn√≠ √∫daje
 */
export interface Kontakty {
  /**
   * Email zdravotnick√©ho za≈ô√≠zen√≠ 
   * @maxLength 50
   */
  email?: string;
  /**
   * Fax
   * @minLength 1
   * @maxLength 25
   */
  fax?: string;
  /**
   * Telefon√≠ kontakt
   * @minLength 1
   * @maxLength 25
   */
  telefon?: string;
  /**
   * WWW zdravotnick√©ho za≈ô√≠zen√≠
   * @minLength 1
   * @maxLength 255
   */
  www?: string;
}

export type ZaznamNrpzsAllOf = {
  /**
   * Po≈ôadov√© ƒç√≠slo za≈ô√≠zen√≠ 
   * @minLength 3
   * @maxLength 3
   * @pattern '^\d{3}$'
   */
  poradoveCisloZar?: string;
  /**
   * Po≈ôadov√© ƒç√≠slo pracovistƒõ 
   * @minLength 3
   * @maxLength 3
   * @pattern '^\d{3}$'
   */
  poradoveCisloPrac?: string;
  /**
   * Typ ekonomick√©ho subjektu - forma hospoda≈ôen√≠ - k√≥d (ciselnikKod: TypSubjektu, zdroj: nrpzs)
   * @minLength 2
   * @maxLength 2
   */
  typSubjektu?: string;
  /**
   * Druh zdravotnick√©ho za≈ô√≠zen√≠ - k√≥d (ciselnikKod: DruhZarizeni, zdroj: nrpzs)
   * @minLength 3
   * @maxLength 3
   * @pattern '^\d{3}$'
   */
  druhZarizeni?: string;
  /** Prim√°rn√≠ z√°znam */
  primarniZaznam?: boolean;
  /**
   * Typ z≈ôizovatele zdravotnick√©ho za≈ô√≠zen√≠ - k√≥d (ciselnikKod: Zrizovatel, zdroj: nrpzs) 
   * @minLength 1
   * @maxLength 1
   */
  typZrizovatele?: string;
  angazovaneOsoby?: AngazovanaOsobaNrpzs[];
  /** Kontakty pro komunikaci se zdravotnick√©h√Ωm za≈æ√≠zen√≠m */
  kontakty?: Kontakty;
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje NRPZS 
 */
export type ZaznamNrpzs = EkonomickySubjektZaklad & ZaznamNrpzsAllOf;

export type EkonomickeSubjektyNrpzsSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektNrpzs[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje NRPZS
 */
export type EkonomickeSubjektyNrpzsSeznam = Seznam & EkonomickeSubjektyNrpzsSeznamAllOf;

/**
 * Ekonomick√Ω subjekt 
 */
export interface EkonomickySubjektNrpzs {
  /**
   * iƒço/id ekonomick√©ho subjektu 
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamNrpzs[];
}

export type AngazovanaOsobaRpshAllOf = {
  /**
   * N√°zev fukce
   * @maxLength 120
   */
  funkce?: string;
  /** Platnost z√°znamu od data */
  platnostOd?: string;
  /** Platnost z√°znamu do data  */
  platnostDo?: string;
  /** adresa anga≈æovan√© osoby */
  adresa?: Adresa;
  /**
   * K√≥d fukce
   * @maxLength 10
   */
  kod?: string;
  /**
   * Typ anga≈æm√° osoby - k√≥d (ciselnikKod: TypAngazma, zdroj: rpsh)
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * Identifikace fyzick√© osoby statut√°rn√≠ho org√°nu subjektu. 
 */
export type AngazovanaOsobaRpsh = AngazovanaOsoba & AngazovanaOsobaRpshAllOf;

/**
 * Informace o zp≈Øsobu jedn√°n√≠ pr√°vnick√© osoby. 
 */
export interface StatutarniOrgan {
  /** Platnost z√°znamu od data  */
  platnostOd?: string;
  /**
   * Texty zp≈Øsobu jedn√°n√≠ pr√°vnick√© osoby. 
   * @maxLength 1000
   */
  popis?: string;
}

/**
 * Stav, ve kter√©m se subjekt nach√°z√≠, s ud√°n√≠m poƒç√°tku platnosti. 
 */
export interface StavSubjektu {
  /**
   * Popis stavu subjektu
   * @maxLength 1000
   */
  popis?: string;
  /** Platnost z√°znamu od data  */
  platnostOd?: string;
  /**
   * Stav ekonomick√©ho subjektu - k√≥d (ciselnikKod: StavSubjektu(zdroj:rpsh) 
   * @minLength 1
   * @maxLength 64
   */
  stavSubjektu?: string;
}

export type ZaznamRpshAllOf = {
  /**
   * ƒå√≠slo registrace
   * @maxLength 20
   */
  cisloRegistrace?: string;
  /**
   * Typ subjektu - strana/hnut√≠ - k√≥d (ciselnikKod: TypSubjektuRpsh) 
   * @minimum 1
   * @maximum 1
   * @pattern ^\d{1}$
   */
  typSubjektu?: string;
  /**
   * Obchodn√≠ jm√©no zkr√°cen√©
   * @maxLength 1000
   */
  obchodniJmenoZkratka?: string;
  angazovaneOsoby?: AngazovanaOsobaRpsh[];
  /** Prim√°rn√≠ z√°znam */
  primarniZaznam?: boolean;
  zmenaStanov?: ZmenaStanov[];
  statutarniOrgan?: StatutarniOrgan[];
  stavSubjektu?: StavSubjektu[];
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje RPSH
 */
export type ZaznamRpsh = EkonomickySubjektZaklad & ZaznamRpshAllOf;

/**
 * Seznam datum≈Ø zmƒõn stanov. 
 */
export interface ZmenaStanov {
  /** Datum zmƒõny stanov. */
  datumZmeny?: string;
}

export type EkonomickeSubjektyRpshSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektRpsh[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje RPSH
 */
export type EkonomickeSubjektyRpshSeznam = Seznam & EkonomickeSubjektyRpshSeznamAllOf;

/**
 * Ekonomick√Ω subjekt 
 */
export interface EkonomickySubjektRpsh {
  /**
   * iƒço/id ekonomick√©ho subjektu 
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamRpsh[];
}

export type AdresaRcnsAllOf = {
  /** Platnost adresy od data */
  platnostOd?: string;
  /** Platnost adresy do data */
  platnostDo?: string;
  /**
   * Typ adresy  - k√≥d (ciselnikKod: TypAdresy, zdroj: rcns) 
   * @minLength 1
   * @maxLength 64
   */
  typAdresy?: string;
};

/**
 * Adresa
 */
export type AdresaRcns = Adresa & AdresaRcnsAllOf;

/**
 * Anga≈æovan√Ω subjekt
 */
export interface AngazovanySubjektRcnsZaklad {
  /**
   * IƒåO
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  ico?: string;
  /** DIƒå */
  dic?: string;
  /** Platnost z√°znamu od data */
  platnostOd?: string;
  /** Platnost z√°znamu do data */
  platnostDo?: string;
  /** Adresa s√≠dla */
  sidlo?: AdresaRcns;
  /**
   * Obchodn√≠ jm√©no subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /**
   * K√≥d st√°tu  (ciselnikKod: Stat) 
   * @minLength 3
   * @maxLength 3
   */
  kodStatu?: string;
  /**
   * Pr√°vn√≠ forma - k√≥d (ciselnikKod: PravniForma) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
}

/**
 * ƒålen svazu c√≠rkv√≠
 */
export interface ClenSvazu {
  /**
   * IƒåO ƒçlana svazu
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  ico?: string;
  /** Platnost ƒçlenstv√≠ od data  */
  platnostOd?: string;
  /** Platnost ƒçlenstv√≠ do data */
  platnostDo?: string;
}

/**
 * Opr√°vnƒõn√≠ k v√Ωkonu zvl√°≈°tn√≠ch pr√°v c√≠rkve
 */
export interface PravoZvlastni {
  /** Zaƒç√°tek platnosti zvl√°≈°tn√≠ho pr√°va subjektu  */
  platnostOd?: string;
  /** Konec platnosti zvl√°≈°tn√≠ho pr√°va subjektu */
  platnostDo?: string;
  /** Opr√°vnƒõn√≠ pro v√Ωkon c√≠rkve - k√≥d (ciselnikKod: Pravo, zdroj: rcns)  */
  kodPravo?: number;
}

/**
 * Informace o registraci c√≠rkve
 */
export interface RegistraceRcns {
  /**
   * Pro subjekt typu c√≠rkev a svaz c√≠rkv√≠ je zde uvedeno registraƒçn√≠ ƒç√≠slo pod kter√Ωm byl dan√Ω subjekt zaregistrov√°n na MK. Pro subjekty typu pr√°vnick√° osoba je zde uvedeno evidenƒçn√≠ ƒç√≠slo pod kter√Ωm byl dan√Ω subjekt zaevidov√°n na MK.
   * @maxLength 30
   */
  cisloRegistrace?: string;
  /**
   * Datum zru≈°en√≠ registrace, evidence subjektu na MK
   * @maxLength 30
   */
  cisloZruseniRegistrace?: string;
  /** Datum vyhl√°≈°en√≠ likvidace subjektu */
  datumLikvidace?: string;
  /** Datum vyhl√°≈°en√≠ konkurzu subjektu */
  datumKonkurzu?: string;
  /** Datum jmenov√°n√≠ opatrovn√≠ka */
  datumOpatrovnik?: string;
  /** Datum zru≈°en√≠ registrace, evidence subjektu na MK */
  datumZruseniRegistrace?: string;
}

export type ZaznamRcnsZakladAllOf = {
  /**
   * Typ subjektu - k√≥d (ciselnikKod: TypSubjektuRcns) 
   * @minLength 1
   * @maxLength 64
   */
  typSubjektu?: string;
  /**
   * St√°t
   * @minLength 3
   * @maxLength 3
   */
  stat?: string;
  /** Prim√°rn√≠ z√°znam */
  primarniZaznam?: boolean;
  /** Registrace */
  registrace?: RegistraceRcns;
  zpusobJednani?: ZpusobJednani[];
  adresySubjektu?: AdresaRcns[];
  /**
   * Identifik√°tor z√°znamu ve zdrojov√©m registru.
   * @maxLength 100
   */
  zdrojId?: string;
  /** Platnost subjekt v registru od */
  platnostOd?: string;
};

/**
 * Z√°kladn√≠ informace o ekonomick√©m subjektu - obecn√Ω p≈ôedek zdroje RCNS 
 */
export type ZaznamRcnsZaklad = EkonomickySubjektZaklad & ZaznamRcnsZakladAllOf;

/**
 * tabulka zp≈Øsob≈Ø jedn√°n√≠ subjektu
 */
export interface ZpusobJednani {
  /** popis zp≈Øsobu jedn√°n√≠ */
  popis?: string;
  /** poƒç√°tek platnosti zp≈Øsobu jedn√°n√≠ dle popisu */
  platnostOd?: string;
  /** konec platnosti zp≈Øsobu jedn√°n√≠ dle popisu  */
  platnostDo?: string;
}

export type AngazovanaOsobaRcnsAllOf = {
  /** Platnost anga≈æovan√© osoby od data */
  platnostOd?: string;
  /** Platnost anga≈æovan√© osoby od data */
  platnostDo?: string;
  /**
   * N√°zev org√°nu
   * @maxLength 100
   */
  nazevAngazma?: string;
  /**
   * Dodateƒçn√° informace jako 'funkce neobsazena'
   * @maxLength 100
   */
  poznamka?: string;
  /**
   * Typ anga≈æm√° osoby  - k√≥d (ciselnikKod: TypAngazma, zdroj: rcns) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
  /**
   * N√°zev org√°nu
   * @maxLength 100
   */
  nazevOrganu?: string;
  /**
   * K√≥d st√°tu  (ciselnikKod: Stat) 
   * @minLength 3
   * @maxLength 3
   */
  kodStatu?: string;
  /**
   * Pr√°vn√≠ forma - k√≥d (ciselnikKod: PravniForma) 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
};

/**
 * N√°zev vykon√°van√© statut√°rn√≠(c√≠rkevn√≠) funkce 
 */
export type AngazovanaOsobaRcns = AngazovanaOsoba & AngazovanaOsobaRcnsAllOf;

/**
 * C√≠rkev - z√°klad - obecn√Ω p≈ôedek 
 */
export interface SubjektCirkevZaklad {
  /** Datum registrace pr√°v dan√© c√≠rkvi. */
  datumRegistracePrav?: string;
  /**
   * ƒå√≠slo registrace pr√°v dan√© c√≠rkvi.
   * @maxLength 30
   */
  cisloRegistracePrav?: string;
  /**
   * IƒåO n√°stupce zru≈°en√© pr√°vnick√© osoby. 
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  icoNastupce?: string;
  /** Datum zru≈°en√≠ registrace pr√°v dan√© c√≠rkvi. */
  datumZruseniRegistracePrav?: string;
  pravoZvlastni?: PravoZvlastni[];
  /**
   * ƒå√≠slo zru≈°en√≠ registrace pr√°v dan√© c√≠rkvi.
   * @maxLength 30
   */
  cisloZruseniRegistracePrav?: string;
}

/**
 * Pr√°vnick√° osoba c√≠rkve - z√°klad - obecn√Ω p≈ôedek 
 */
export interface SubjektPravnickaOsobaZaklad {
  /**
   * IƒåO z≈ôizovatele pr√°vnick√© osoby. 
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  icoZrizovatel?: string;
  /**
   * IƒåO n√°stupce zru≈°en√© pr√°vnick√© osoby. 
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  icoNastupce?: string;
  /** Zp≈Øsob zru≈°en√≠ registrace ‚Äì k√≥d (ciselnikKod: ZpusobZruseni, zdroj: rcns) */
  zpusobZruseniRegistrace?: number;
}

/**
 * Svaz c√≠rkv√≠ - z√°klad - obecn√Ω p≈ôedek
 */
export interface SubjektSvazCirkviZaklad {
  clenoveSvazu?: ClenSvazu[];
  /**
   * IƒåO n√°stupce zru≈°en√© pr√°vnick√© osoby. 
   * @minLength 8
   * @maxLength 8
   * @pattern ^\d{8}$
   */
  icoNastupce?: string;
}

/**
 * Anga≈æm√°
 */
export interface AngazmaRcns {
  /** Pr√°vnick√° osoba */
  osobaPravnicka?: AngazovanySubjektRcns;
  /** Fyzick√° osoba */
  osobaFyzicka?: AngazovanaOsobaRcns;
}

export type AngazovanySubjektRcnsAllOf = {
  statutarniOrgany?: AngazovanaOsobaRcns[];
};

/**
 * Anga≈æovan√Ω subjekt
 */
export type AngazovanySubjektRcns = AngazovanySubjektRcnsZaklad & AngazovanySubjektRcnsAllOf;

export type EkonomickeSubjektyRcnsSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektRcns[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje RCNS
 */
export type EkonomickeSubjektyRcnsSeznam = Seznam & EkonomickeSubjektyRcnsSeznamAllOf;

/**
 * Staut√°rn√≠ org√°ny c√≠rkve
 */
export interface StatutatniOrganRcns {
  /** Struktura s √∫daji sledovan√Ωmi u subjektu typu c√≠rkev */
  subjektCirkev?: SubjektCirkev;
  /** Struktura s √∫daji sledovan√Ωmi u subjektu typu svaz c√≠rkv√≠ */
  subjektSvazCirkvi?: SubjektSvazCirkvi;
  /** Struktura s √∫daji sledovan√Ωmi u subjektu typu pr√°vnick√° osoba d≈ô√≠ve c√≠rkevn√≠ pr√°vnick√° osoba. */
  subjektPravnickaOsoba?: SubjektPravnickaOsoba;
}

/**
 * Ekonomick√Ω subjekt 
 */
export interface EkonomickySubjektRcns {
  /**
   * iƒço/id ekonomick√©ho subjektu 
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamRcns[];
}

export type SubjektCirkevAllOf = {
  organy?: AngazovanySubjektRcns[];
};

/**
 * C√≠rkev
 */
export type SubjektCirkev = SubjektCirkevZaklad & SubjektCirkevAllOf;

export type SubjektPravnickaOsobaAllOf = {
  organy?: AngazovanaOsobaRcns[];
};

/**
 * Pr√°vnick√° osoba c√≠rkve
 */
export type SubjektPravnickaOsoba = SubjektPravnickaOsobaZaklad & SubjektPravnickaOsobaAllOf;

export type SubjektSvazCirkviAllOf = {
  organy?: AngazovanySubjektRcns[];
};

/**
 * Svaz c√≠rkv√≠
 */
export type SubjektSvazCirkvi = SubjektSvazCirkviZaklad & SubjektSvazCirkviAllOf;

export type ZaznamRcnsAllOf = {
  /** Statut√°rn√≠ org√°ny c√≠rkve */
  statutarniOrgan?: StatutatniOrganRcns;
  likvidatori?: AngazmaRcns[];
  konkurzniSpravci?: AngazmaRcns[];
  opatrovnici?: AngazmaRcns[];
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje RCNS
 */
export type ZaznamRcns = ZaznamRcnsZaklad & ZaznamRcnsAllOf;

export type AngazovanaOsobaSzrZakladAllOf = {
  /**
   * Typ anga≈æm√° osoby  - k√≥d (ciselnikKod: TypAngazma) 
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * Anga≈æovan√° osoba - obecn√Ω p≈ôedek
 */
export type AngazovanaOsobaSzrZaklad = AngazovanaOsoba & AngazovanaOsobaSzrZakladAllOf;

export type EkonomickySubjektEzpZakladAllOf = {
  /**
   * URL odkaz na z√°znam zdrojov√©ho IS.
   * @maxLength 255
   */
  odkaz?: string;
};

/**
 * Ekonomick√Ω subjekt zdroje EZP - obecn√Ω p≈ôedek
 */
export type EkonomickySubjektEzpZaklad = EkonomickySubjektZaklad & EkonomickySubjektEzpZakladAllOf;

export type EkonomickeSubjektySzrSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektSzr[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje SZR
 */
export type EkonomickeSubjektySzrSeznam = Seznam & EkonomickeSubjektySzrSeznamAllOf;

/**
 * Ekonomick√Ω subjekt 
 */
export interface EkonomickySubjektSzr {
  /**
   * iƒço/id ekonomick√©ho subjektu 
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamSzr[];
}

/**
 * Detailn√≠ infromace o ekonomick√©m subjektu ze subzdroje EZP
 */
export interface Ezp {
  /** Osoba podnikatele EZP */
  osobaEzp?: AngazovanaOsobaSzrZaklad;
  /** Ekonomick√Ω subjekt EZP */
  subjektEzp?: EkonomickySubjektEzpZaklad;
}

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje SZR - ƒç√°st EZP 
 */
export interface ZaznamSzr {
  /** Evidence zemƒõdƒõlsk√©ho podnikatele */
  ezp?: Ezp;
}

export type AngazovanaOsobaRsAllOf = {
  /**
   * Typ anga≈æm√° osoby - k√≥d (ciselnikKod: TypAngazma, zdroj: rs)
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
};

/**
 * Anga≈æovan√° osoba
 */
export type AngazovanaOsobaRs = AngazovanaOsoba & AngazovanaOsobaRsAllOf;

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje R≈†
 */
export interface AngazovanySubjektRs {
  /**
   * IƒåO
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  ico?: string;
  /**
   * Jm√©no subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /**
   * Zkr√°cen√© jm√©no subjektu
   * @minLength 1
   * @maxLength 40
   */
  obchodniJmenoZkracene?: string;
  /**
   * Typ anga≈æm√° osoby - k√≥d (ciselnikKod: TypAngazma, zdroj: rs)
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
  /** Adresa anga≈æovan√©ho subjektu */
  adresa?: Adresa;
  /**
   * Pr√°vn√≠ forma 
   * @minLength 3
   * @maxLength 3
   * @pattern ^\d{3}$
   */
  pravniForma?: string;
  /** Datum vzniku */
  datumVzniku?: string;
  /** Datum z√°niku */
  datumZaniku?: string;
}

/**
 * Kontakty subjektu
 */
export interface KontaktyRs {
  /**
   * kontaktn√≠ telefon
   * @minLength 1
   * @maxLength 25
   */
  telefon?: string;
  /**
   * ƒç√≠slo faxu
   * @minLength 1
   * @maxLength 25
   */
  fax?: string;
  email?: string[];
  /**
   * webov√° adresa ekonomick√©ho subjektu
   * @minLength 1
   * @maxLength 255
   */
  www?: string;
}

/**
 * ≈†kola
 */
export interface SkolaZarizeni {
  /** Kontakty */
  kontakty?: KontaktyRs;
  /**
   * IZO - resortn√≠ identifik√°tor
   * @minLength 1
   * @maxLength 9
   */
  izo?: string;
  /**
   * Jm√©no subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /**
   * Zkr√°cen√© jm√©no subjektu
   * @minLength 1
   * @maxLength 40
   */
  obchodniJmenoZkracene?: string;
  /**
   * Typ ≈°koly
   * @minLength 1
   * @maxLength 64
   */
  typSkoly?: string;
  /** Adresa anga≈æovan√©ho subjektu */
  adresa?: Adresa;
  /** Datum vzniku */
  datumVzniku?: string;
  /** Datum z√°niku */
  datumZaniku?: string;
}

export type ZaznamRsZakladAllOf = {
  /**
   * REDIZO - resortn√≠ identifik√°tor
   * @minLength 1
   * @maxLength 9
   */
  redizo?: string;
  /**
   * Zkr√°cen√© obchodn√≠ jm√©no
   * @minLength 1
   * @maxLength 40
   */
  obchodniJmenoZkracene?: string;
  /** Kontakty */
  kontakty?: KontaktyRs;
  /** Prim√°rn√≠ z√°znam */
  primarniZaznam?: boolean;
  skolyAZarizeni?: SkolaZarizeni[];
  /**
   * Typ subjektu
   * @minLength 1
   * @maxLength 64
   */
  typSubjektu?: string;
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje R≈†
 */
export type ZaznamRsZaklad = EkonomickySubjektZaklad & ZaznamRsZakladAllOf;

export type EkonomickeSubjektyRsSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektRs[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje R≈†
 */
export type EkonomickeSubjektyRsSeznam = Seznam & EkonomickeSubjektyRsSeznamAllOf;

/**
 * Ekonomick√Ω subjekt
 */
export interface EkonomickySubjektRs {
  /**
   * iƒço ekonomick√©ho subjektu
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamRs[];
}

export type ZaznamRsAllOf = {
  angazovanySubjekt?: AngazovanySubjektRs[];
  angazovanaOsoba?: AngazovanaOsobaRs[];
};

/**
 * Z√°znam R≈†
 */
export type ZaznamRs = ZaznamRsZaklad & ZaznamRsAllOf;

export type CiselnikyNazevnikSeznamAllOf = {
  ciselniky?: Ciselnik[];
};

/**
 * Seznam ƒç√≠seln√≠k≈Ø
 */
export type CiselnikyNazevnikSeznam = Seznam & CiselnikyNazevnikSeznamAllOf;

/**
 * ƒå√≠seln√≠k
 */
export interface Ciselnik {
  /**
   * K√≥d ƒç√≠seln√≠ku
   * @minLength 1
   * @maxLength 64
   */
  kodCiselniku?: string;
  /**
   * N√°zev ƒç√≠seln√≠ku
   * @maxLength 255
   */
  nazevCiselniku?: string;
  polozkyCiselniku?: PolozkaCiselniku[];
  /**
   * Zdroj ƒç√≠seln√≠ku (ciselnikKod: StavZdroje) 
   * @minLength 1
   * @maxLength 64
   */
  zdrojCiselniku?: string;
}

export type CiselnikyZakladniFiltrAllOf = {
  /**
   * Zdroj/oblast ƒç√≠seln√≠ku - k√≥d (ciselnikKod: TypZdrojeAres, zdroj:com) 
   * @minLength 1
   * @maxLength 64
   */
  zdrojCiselniku?: string;
  /**
   * K√≥d ƒç√≠seln√≠ku
   * @minLength 1
   * @maxLength 64
   */
  kodCiselniku?: string;
};

/**
 * Filtr pro vyhled√°v√°n√≠ ƒç√≠seln√≠k≈Ø
 */
export type CiselnikyZakladniFiltr = StrankovaniARazeni & CiselnikyZakladniFiltrAllOf;

/**
 * Seznam n√°zv≈Ø polo≈æky ƒç√≠seln√≠k≈Ø z ohledem na jazykovou mutaci
 */
export interface NazevPolozky {
  /** K√≥d jazyka polo≈æky ƒç√≠seln√≠ku */
  kodJazyka?: string;
  /**
   * N√°zev polo≈æky ƒç√≠seln√≠ku
   * @maxLength 255
   */
  nazev?: string;
}

/**
 * Polo≈æka ƒç√≠seln√≠ku
 */
export interface PolozkaCiselniku {
  /**
   * K√≥d polo≈æky ƒç√≠seln√≠ku
   * @minLength 1
   * @maxLength 64
   */
  kod?: string;
  nazev?: NazevPolozky[];
  /** Platnost polo≈æky od data */
  platnostOd?: string;
  /** Platnost polo≈æky do data  */
  platnostDo?: string;
  /**
   * Nad≈ô√≠zen√Ω z√°znam polo≈æky ƒç√≠seln√≠ku
   * @minLength 1
   * @maxLength 64
   */
  kodNadrizeny?: string;
}

/**
 * Adresa 
 */
export interface AdresaFiltr {
  /**
   * K√≥d ƒçasti obce
   * @minimum 0
   * @maximum 999999
   */
  kodCastiObce?: number;
  /**
   * K√≥d spr√°vn√≠ho obvodu Prahy
   * @minimum 0
   * @maximum 999
   */
  kodSpravnihoObvodu?: number;
  /**
   * K√≥d mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta
   * @minimum 0
   * @maximum 999999
   */
  kodMestskeCastiObvodu?: number;
  /**
   * K√≥d ulice, ve≈ôejn√©ho prostranstv√≠ ze zdroje
   * @minimum 0
   * @maximum 9999999
   */
  kodUlice?: number;
  /**
   * ƒå√≠slo domovn√≠
   * @maximum 9999
   */
  cisloDomovni?: number;
  /**
   * K√≥d obce
   * @minimum 0
   * @maximum 999999
   */
  kodObce?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - ƒç√≠seln√° ƒç√°st
   * @maximum 999
   */
  cisloOrientacni?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - p√≠smenn√° ƒç√°st
   * @maxLength 1
   */
  cisloOrientacniPismeno?: string;
  /**
   * Nestrukturovan√° adresa
   * @maxLength 1500
   */
  textovaAdresa?: string;
}

export type EkonomickeSubjektyRegistraceFiltrAllOf = {
  ico?: string[];
};

/**
 * Filtr pro vyhled√°n√≠ seznamu ekonomick√Ωch subjekt≈Ø podle parametru IƒåO.
 */
export type EkonomickeSubjektyRegistraceFiltr = StrankovaniARazeni & EkonomickeSubjektyRegistraceFiltrAllOf;

export type EkonomickeSubjektyZakladFiltrAllOf = {
  ico?: string[];
  /**
   * Obchodn√≠ jm√©no ekonomick√©ho subjektu
   * @minLength 1
   * @maxLength 2000
   */
  obchodniJmeno?: string;
  /** Adresa s√≠dla ekonomick√©ho subjektu */
  sidlo?: AdresaFiltr;
  pravniForma?: string[];
  financniUrad?: string[];
};

/**
 * Obecn√Ω filtr pro vyhled√°n√≠ seznamu ekonomick√Ωch subjekt≈Ø
 */
export type EkonomickeSubjektyZakladFiltr = StrankovaniARazeni & EkonomickeSubjektyZakladFiltrAllOf;

export type StandardizovaneAdresySeznamAllOf = {
  standardizovaneAdresy?: StandardizovanaAdresa[];
  /** Stav standardizace adresy - kod (ƒå√≠seln√≠k kod:StavStandardizaceAdresy) UPLNA, CASTECNA_OBEC/..., NEUSPESNA */
  stavStandardizace?: string;
  /** Podm√≠nka dotazu */
  request?: StandardizovanaAdresaFiltr;
};

/**
 * Seznam nalezen√Ωch standardizovan√Ωch adres
 */
export type StandardizovaneAdresySeznam = Seznam & StandardizovaneAdresySeznamAllOf;

/**
 * Standardizovan√° adresa
 */
export interface StandardizovanaAdresa {
  /**
   * ƒå√≠slo domovn√≠
   * @maximum 9999
   */
  cisloDomovni?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - ƒç√≠seln√° ƒç√°st
   * @maximum 999
   */
  cisloOrientacni?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - p√≠smenn√° ƒç√°st
   * @maxLength 1
   */
  cisloOrientacniPismeno?: string;
  /**
   * K√≥d adresn√≠ho m√≠sta
   * @minimum 0
   * @maximum 999999999
   */
  kodAdresnihoMista?: number;
  /**
   * K√≥d ƒçasti obce
   * @minimum 0
   * @maximum 999999
   */
  kodCastiObce?: number;
  /**
   * K√≥d kraje
   * @minimum 0
   * @maximum 999
   */
  kodKraje?: number;
  /**
   * K√≥d mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta
   * @minimum 0
   * @maximum 999999
   */
  kodMestskeCastiObvodu?: number;
  /**
   * K√≥d mƒõstsk√©ho obvodu Prahy
   * @minimum 0
   * @maximum 999
   */
  kodMestskehoObvoduP?: number;
  /**
   * K√≥d obce
   * @minimum 0
   * @maximum 999999
   */
  kodObce?: number;
  /**
   * K√≥d okresu
   * @minimum 0
   * @maximum 9999
   */
  kodOkresu?: number;
  /**
   * K√≥d spr√°vn√≠ho obvodu Prahy
   * @minimum 0
   * @maximum 999
   */
  kodSpravnihoObvoduP?: number;
  /**
   * K√≥d stavebn√≠ho objektu
   * @minimum 0
   * @maximum 999999999
   */
  kodStavebnihoObjektu?: number;
  /**
   * K√≥d ulice, ve≈ôejn√©ho prostranstv√≠ ze zdroje
   * @minimum 0
   * @maximum 9999999
   */
  kodUlice?: number;
  /**
   * N√°zev ƒç√°sti obce
   * @maxLength 48
   */
  nazevCastiObce?: string;
  /**
   * N√°zev kraje
   * @maxLength 32
   */
  nazevKraje?: string;
  /**
   * N√°zev mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta 
   * @maxLength 48
   */
  nazevMestskeCastiObvodu?: string;
  /**
   * N√°zev mƒõstsk√©ho obvodu Prahy
   * @maxLength 32
   */
  nazevMestskehoObvoduP?: string;
  /**
   * N√°zev obce
   * @maxLength 48
   */
  nazevObce?: string;
  /**
   * N√°zev okresu
   * @maxLength 32
   */
  nazevOkresu?: string;
  /**
   * N√°zev spr√°vn√≠ho obvodu Prahy 
   * @maxLength 32
   */
  nazevSpravnihoObvoduP?: string;
  /**
   * N√°zev ulice, ve≈ôejn√©ho prostranstv√≠ 
   * @maxLength 48
   */
  nazevUlice?: string;
  /** Po≈°tovn√≠ smƒõrovac√≠ ƒç√≠slo adresn√≠ po≈°ty */
  psc?: number;
  /**
   * Textov√° podoba adresy
   * @maxLength 1500
   */
  textovaAdresa?: string;
  /** Typ stavebn√≠ho objektu - k√≥d (ƒå√≠seln√≠k kod:TypStavebnihoObjektu, zdroj:ruian) pozn. atribut bude v p≈ô√≠≈°t√≠ch verz√≠ch nahrazen atributem typCisloDomovni (sjednocen√≠ pojmoslov√≠ IS). Z d≈Øvod≈Ø kompatibility api bude atribut podporov√°no/duplikov√°n do verze 1.2.0  */
  typStavebnihoObjektu?: string;
  /**
   * Typ ƒç√≠sla domu - k√≥d (ciselnikKod: TypCislaDomovniho) 
   * @maximum 9999
   */
  typCisloDomovni?: number;
}

export type StandardizovanaAdresaFiltrAllOf = {
  /**
   * K√≥d obce
   * @minimum 0
   * @maximum 999999
   */
  kodObce?: number;
  /**
   * N√°zev obce
   * @maxLength 48
   */
  nazevObce?: string;
  /**
   * K√≥d ƒç√°sti obce
   * @minimum 0
   * @maximum 999999
   */
  kodCastiObce?: number;
  /**
   * N√°zev ƒç√°sti obce
   * @maxLength 48
   */
  nazevCastiObce?: string;
  /**
   * K√≥d mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta nebo Prahy 
   * @minimum 0
   * @maximum 999999
   */
  kodMestskehoCastiObvodu?: number;
  /**
   * N√°zev mƒõstsk√© ƒç√°sti statut√°rn√≠ho mƒõsta nebo Prahy
   * @maxLength 32
   */
  nazevMestskehoCastiObvodu?: string;
  /**
   * K√≥d ulice, ve≈ôejn√©ho prostranstv√≠ 
   * @minimum 0
   * @maximum 9999999
   */
  kodUlice?: number;
  /**
   * N√°zev ulice, ve≈ôejn√©ho prostranstv√≠ 
   * @maxLength 48
   */
  nazevUlice?: string;
  /**
   * ƒå√≠slo domovn√≠
   * @maximum 9999
   */
  cisloDomovni?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - ƒç√≠seln√° ƒç√°st
   * @maximum 999
   */
  cisloOrientacni?: number;
  /**
   * ƒå√≠slo orientaƒçn√≠ - p√≠smenn√° ƒç√°st
   * @maxLength 1
   */
  cisloOrientacniPismeno?: string;
  /**
   * K√≥d adresn√≠ho m√≠sta
   * @minimum 0
   * @maximum 999999999
   */
  kodAdresnihoMista?: number;
  /**
   * Nestrukturovan√° adresa
   * @maxLength 1500
   */
  textovaAdresa?: string;
  /** Typ po≈æadovan√© standardizace - k√≥d (ƒç√≠seln√≠k kod:TypStandardizaceAdresy) UPLNA_STANDARDIZACE, VYHOVUJICI_ADRESY */
  typStandardizaceAdresy?: string;
};

/**
 * Komplexn√≠ filtr pro standardizaci adresy R√öIAN 
 */
export type StandardizovanaAdresaFiltr = StrankovaniARazeni & StandardizovanaAdresaFiltrAllOf;

export type AdresaCeuAllOf = {
  /**
   * Typ adresy
   * @minLength 1
   * @maxLength 64
   */
  typAdresy?: string;
};

/**
 * Adresa
 */
export type AdresaCeu = Adresa & AdresaCeuAllOf;

/**
 * Tabulka anga≈æovan√Ωch osob
 */
export interface AngazovanaOsobaCeu {
  /**
   * Jm√©no, p≈ô√≠jmen√≠ spr√°vce
   * @maxLength 100
   */
  jmenoPrijmeni?: string;
  /**
   * Typ anga≈æm√°
   * @minLength 1
   * @maxLength 64
   */
  typAngazma?: string;
}

export type EkonomickySubjektCeuZakladAllOf = {
  /**
   * Typ subjektu  (ciselnikKod: TypSubjektu, zdroj: Ceu) 
   * @minLength 1
   * @maxLength 64
   */
  typSubjektu?: string;
  adresy?: AdresaCeu[];
  /**
   * Jm√©no, p≈ô√≠jmen√≠ fyzick√© osoby
   * @maxLength 100
   */
  jmenoPrijmeni?: string;
};

/**
 * Ekonomick√Ω subjekt zdroje CE√ö - obecn√Ω p≈ôedek 
 */
export type EkonomickySubjektCeuZaklad = EkonomickySubjektZaklad & EkonomickySubjektCeuZakladAllOf;

/**
 * √öpadek - obecn√Ω p≈ôedek
 */
export interface UpadekCeu {
  /** Textace podnƒõtu √∫padku  */
  podnet?: string;
  /** Spisov√° znaƒçka ≈ô√≠zen√≠ √∫padku */
  spisZn?: string;
  /** Datum z√°pisu */
  datum?: string;
  /**
   * Odkaz na detail √∫padku 
   * @minLength 1
   * @maxLength 255
   */
  detail?: string;
  /**
   * Odkaz na usnesen√≠
   * @minLength 1
   * @maxLength 255
   */
  usneseni?: string;
  /**
   * Akce √∫padku
   * @minLength 1
   * @maxLength 64
   */
  akceUpadek?: string;
  /**
   * Typ √∫padku
   * @minLength 1
   * @maxLength 64
   */
  typUpadek?: string;
  /**
   * Soud rozhoduj√≠c√≠ o √∫padku
   * @minLength 1
   * @maxLength 64
   */
  soudUpadek?: string;
}

export type EkonomickeSubjektyCeuSeznamAllOf = {
  ekonomickeSubjekty?: EkonomickySubjektCeu[];
};

/**
 * Seznam ekonomick√Ωch subjekt≈Ø ze zdroje CE√ö
 */
export type EkonomickeSubjektyCeuSeznam = Seznam & EkonomickeSubjektyCeuSeznamAllOf;

/**
 * Ekonomick√Ω subjekt
 */
export interface EkonomickySubjektCeu {
  /**
   * iƒço/Id ekonomick√©ho subjektu
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
  zaznamy?: ZaznamCeu[];
}

export type UpadekCeuVerejnyAllOf = {
  /** Spr√°vce √∫padku  */
  spravceUpadku?: AngazovanaOsobaCeu;
};

/**
 * Tabulka √∫padk≈Ø
 */
export type UpadekCeuVerejny = UpadekCeu & UpadekCeuVerejnyAllOf;

export type ZaznamCeuAllOf = {
  upadek?: UpadekCeuVerejny[];
};

/**
 * Detailn√≠ informace o ekonomick√©m subjektu ze zdroje CE√ö
 */
export type ZaznamCeu = EkonomickySubjektCeuZaklad & ZaznamCeuAllOf;

/**
 * Filtr notifikaƒçn√≠ d√°vky ARES
 */
export interface EkonomickeSubjektyNotifikaceFiltr {
  /**
   * Datov√Ω zdroj notifikaƒçn√≠ d√°vky - k√≥d (ciselnikKod: TypZdrojeAres, zdroj:com) Podporovan√© zdroje:  vr - Vƒõ≈ôejn√Ω rejst≈ô√≠k res - Registr ekonomick√Ωch subjekt≈Ø rzp - Registr ≈æivnostensk√©ho podnik√°n√≠ nrpzs - N√°rodn√≠ registr poskytovatel≈Ø zdravotnick√Ωch slu≈æeb rcns - Registr c√≠rkvn√≠ a n√°bo≈æensk√Ωch spoleƒçenstv√≠ rpsh - Registr politick√Ωch stran a hnut√≠ rs - Registr ≈°kol szr - Spoleƒçn√Ω zemƒõdƒõlsk√Ω registr 
   * @maxLength 30
   */
  datovyZdroj?: string;
}

/**
 * Notifikaƒçn√≠ zmƒõna
 */
export interface Notifikace {
  /**
   * Typ notifikaƒçn√≠ zmƒõny - k√≥d (kodCiselniku: TypZmenyAres)
   * @maxLength 50
   */
  typZmeny?: string;
  /**
   * Iƒço ekonomick√©ho subjektu, pokud je iƒço p≈ôidƒõlen√©. Id ekonomick√©ho subjektu, polkud je iƒço nep≈ôidƒõlen√©.
   * @maxLength 32
   * @pattern ^(ARES_)?\d{8}$
   */
  icoId?: string;
}

/**
 * Notifikaƒçn√≠ d√°vka datov√©ho zdroje
 */
export interface NotifikacniDavka {
  /** ƒå√≠slo notifikaƒçn√≠ d√°vky */
  cisloDavky?: number;
  /**
   * Datov√Ω zdroj notifikaƒçn√≠ d√°vky - k√≥d (ciselnikKod: TypZdrojeAres, zdroj:com) 
   * @maxLength 30
   */
  datovyZdroj?: string;
  /** Datum uvolnƒõn√≠ notifikaƒçn√≠ d√°vky */
  datumUvolneniDavky?: string;
  /** Poƒçet zmƒõn v notifikaƒçn√≠ d√°vce */
  pocetZmen?: number;
}

export type NotifikacniDavkaZaznamAllOf = {
  seznamNotifikaci?: Notifikace[];
};

/**
 * Notifikaƒçn√≠ d√°vka datov√©ho zdroje
 */
export type NotifikacniDavkaZaznam = NotifikacniDavka & NotifikacniDavkaZaznamAllOf;

/**
 * Seznam notifikaƒçn√≠ch d√°vek
 */
export interface SeznamNotifikacnichDavek {
  notifikacniDavky?: NotifikacniDavka[];
}

/**
 * Anga≈æovan√° osoba - filtr
 */
export interface AngazovanaOsobaFiltr {
  /**
   * Jm√©no anga≈æovan√© osoby
   * @maxLength 100
   */
  jmeno?: string;
  /**
   * Rodn√© ƒç√≠slo osoby
   * @minLength 9
   * @maxLength 10
   */
  rodneCislo?: string;
  /**
   * P≈ô√≠jmen√≠ anga≈æovan√© osoby
   * @maxLength 100
   */
  prijmeni?: string;
  /** Datum narozen√≠ anga≈æovan√© osoby */
  datumNarozeni?: string;
}

/**
 * Chybov√© k√≥dy.
 */
export type KodChybyEnum = typeof KodChybyEnum[keyof typeof KodChybyEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const KodChybyEnum = {
  OBECNA_CHYBA: 'OBECNA_CHYBA',
  CHYBA_VSTUPU: 'CHYBA_VSTUPU',
  NENALEZENO: 'NENALEZENO',
  NENI_IMPLEMENTOVANO: 'NENI_IMPLEMENTOVANO',
  NEPRIHLASENY_UZIVATEL: 'NEPRIHLASENY_UZIVATEL',
  NENI_OPRAVNENI: 'NENI_OPRAVNENI',
} as const;

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjekt≈Ø ARES podle komplexn√≠ho filtru
 */
export const vyhledejEkonomickeSubjekty = <TData = AxiosResponse<EkonomickeSubjektySeznam>>(
    ekonomickeSubjektyKomplexFiltr: EkonomickeSubjektyKomplexFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty/vyhledat`,
      ekonomickeSubjektyKomplexFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ ekonomick√©ho subjektu ARES podle zadan√©ho iƒça 
 */
export const vratEkonomickySubjekt = <TData = AxiosResponse<EkonomickySubjekt>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje VR
 */
export const vratEkonomickySubjektVr = <TData = AxiosResponse<EkonomickySubjektVr>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-vr/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje VR
 */
export const vyhledejSeznamEkonomickychSubjektuVr = <TData = AxiosResponse<EkonomickeSubjektyVrSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-vr/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje RES
 */
export const vratEkonomickySubjektRes = <TData = AxiosResponse<EkonomickySubjektRes>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-res/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje RES
 */
export const vyhledejSeznamEkonomickychSubjektuRes = <TData = AxiosResponse<EkonomickeSubjektyResSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-res/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje R≈ΩP
 */
export const vratEkonomickySubjektRzp = <TData = AxiosResponse<EkonomickySubjektRzp>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rzp/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje R≈ΩP
 */
export const vyhledejSeznamEkonomickychSubjektuRzp = <TData = AxiosResponse<EkonomickeSubjektyRzpSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rzp/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje NRPZS
 */
export const vyhledejSeznamEkonomickychSubjektuNrpzs = <TData = AxiosResponse<EkonomickeSubjektyNrpzsSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-nrpzs/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje NRPZS
 */
export const vratEkonomickySubjektNrpzs = <TData = AxiosResponse<EkonomickySubjektNrpzs>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-nrpzs/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje RPSH
 */
export const vratEkonomickySubjektRpsh = <TData = AxiosResponse<EkonomickySubjektRpsh>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rpsh/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje RPSH
 */
export const vyhledejSeznamEkonomickychSubjektuRpsh = <TData = AxiosResponse<EkonomickeSubjektyRpshSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rpsh/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje RCNS
 */
export const vratEkonomickySubjektRcns = <TData = AxiosResponse<EkonomickySubjektRcns>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rcns/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje RCNS
 */
export const vyhledejSeznamEkonomickychSubjektuRcns = <TData = AxiosResponse<EkonomickeSubjektyRcnsSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rcns/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje SZR - subregistr EZP
 */
export const vratEkonomickySubjektSzr = <TData = AxiosResponse<EkonomickySubjektSzr>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-szr/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje SZR - subregistr EZP
 */
export const vyhledejSeznamEkonomickychSubjektuSzr = <TData = AxiosResponse<EkonomickeSubjektySzrSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-szr/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho ekonomick√©ho subjektu ze zdroje R≈†
 */
export const vratEkonomickySubjektRs = <TData = AxiosResponse<EkonomickySubjektRs>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rs/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu ekonomick√Ωch subjektu ze zdroje R≈†
 */
export const vyhledejSeznamEkonomickychSubjektuRs = <TData = AxiosResponse<EkonomickeSubjektyRsSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-rs/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ ƒç√≠seln√≠k≈Ø pou≈æ√≠van√Ωch v IS ARES podle komplexn√≠ho filtru
 */
export const vyhledejCiselnik = <TData = AxiosResponse<CiselnikyNazevnikSeznam>>(
    ciselnikyZakladniFiltr: CiselnikyZakladniFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ciselniky-nazevniky/vyhledat`,
      ciselnikyZakladniFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu standardizovan√Ωch adres R√öIAN podle komplexn√≠ho filtru
 */
export const vyhledejStandardizovaneAdresy = <TData = AxiosResponse<StandardizovaneAdresySeznam>>(
    standardizovanaAdresaFiltr: StandardizovanaAdresaFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/standardizovane-adresy/vyhledat`,
      standardizovanaAdresaFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ konkr√©tn√≠ho √∫padce ze zdroje CE√ö
 */
export const vratEkonomickySubjektCeu = <TData = AxiosResponse<EkonomickySubjektCeu>>(
    ico: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-ceu/${ico}`,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu √∫padc≈Ø ze zdroje CE√ö
 */
export const vyhledejSeznamEkonomickychSubjektuCeu = <TData = AxiosResponse<EkonomickeSubjektyCeuSeznam>>(
    ekonomickeSubjektyRegistraceFiltr: EkonomickeSubjektyRegistraceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-ceu/vyhledat`,
      ekonomickeSubjektyRegistraceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠ seznamu notifikaƒçn√≠ch d√°vek ekonomick√Ωch subjekt≈Ø ARES podle zvolen√©ho filtru 
 */
export const vyhledejSeznamNotifikacnichDavek = <TData = AxiosResponse<SeznamNotifikacnichDavek>>(
    ekonomickeSubjektyNotifikaceFiltr: EkonomickeSubjektyNotifikaceFiltr, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-notifikace/vyhledat`,
      ekonomickeSubjektyNotifikaceFiltr,options
    );
  }

/**
 * Vyhled√°n√≠  konkr√©tn√≠ notifikaƒçn√≠ d√°vky zdroje ARES podle vstupc√°ch parametr≈Ø (zdroj, ƒç√≠slo notifikaƒçn√≠ d√°vky) 
 */
export const vratNotifikacniDavku = <TData = AxiosResponse<NotifikacniDavkaZaznam>>(
    datovyZdroj: string,
    cisloDavky: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty-notifikace/datovy-zdroj/${datovyZdroj}/cislo-davky/${cisloDavky}`,options
    );
  }

export type VyhledejEkonomickeSubjektyResult = AxiosResponse<EkonomickeSubjektySeznam>
export type VratEkonomickySubjektResult = AxiosResponse<EkonomickySubjekt>
export type VratEkonomickySubjektVrResult = AxiosResponse<EkonomickySubjektVr>
export type VyhledejSeznamEkonomickychSubjektuVrResult = AxiosResponse<EkonomickeSubjektyVrSeznam>
export type VratEkonomickySubjektResResult = AxiosResponse<EkonomickySubjektRes>
export type VyhledejSeznamEkonomickychSubjektuResResult = AxiosResponse<EkonomickeSubjektyResSeznam>
export type VratEkonomickySubjektRzpResult = AxiosResponse<EkonomickySubjektRzp>
export type VyhledejSeznamEkonomickychSubjektuRzpResult = AxiosResponse<EkonomickeSubjektyRzpSeznam>
export type VyhledejSeznamEkonomickychSubjektuNrpzsResult = AxiosResponse<EkonomickeSubjektyNrpzsSeznam>
export type VratEkonomickySubjektNrpzsResult = AxiosResponse<EkonomickySubjektNrpzs>
export type VratEkonomickySubjektRpshResult = AxiosResponse<EkonomickySubjektRpsh>
export type VyhledejSeznamEkonomickychSubjektuRpshResult = AxiosResponse<EkonomickeSubjektyRpshSeznam>
export type VratEkonomickySubjektRcnsResult = AxiosResponse<EkonomickySubjektRcns>
export type VyhledejSeznamEkonomickychSubjektuRcnsResult = AxiosResponse<EkonomickeSubjektyRcnsSeznam>
export type VratEkonomickySubjektSzrResult = AxiosResponse<EkonomickySubjektSzr>
export type VyhledejSeznamEkonomickychSubjektuSzrResult = AxiosResponse<EkonomickeSubjektySzrSeznam>
export type VratEkonomickySubjektRsResult = AxiosResponse<EkonomickySubjektRs>
export type VyhledejSeznamEkonomickychSubjektuRsResult = AxiosResponse<EkonomickeSubjektyRsSeznam>
export type VyhledejCiselnikResult = AxiosResponse<CiselnikyNazevnikSeznam>
export type VyhledejStandardizovaneAdresyResult = AxiosResponse<StandardizovaneAdresySeznam>
export type VratEkonomickySubjektCeuResult = AxiosResponse<EkonomickySubjektCeu>
export type VyhledejSeznamEkonomickychSubjektuCeuResult = AxiosResponse<EkonomickeSubjektyCeuSeznam>
export type VyhledejSeznamNotifikacnichDavekResult = AxiosResponse<SeznamNotifikacnichDavek>
export type VratNotifikacniDavkuResult = AxiosResponse<NotifikacniDavkaZaznam>
